OpenMSX compile, install, config and run HOWTO
==============================================
or: get most out of openMSX in 11 simple steps! ;-)

First note this:
- Authors: Jorrith Schaap & Manuel Bilderbeek & the other openMSX developers
- We do not claim this HOWTO is complete or even correct! We just hope it helps
  you enjoy openMSX more.

This HOWTO is about openMSX, the open source MSX emulator that tries to achieve
perfect emulation by using a novel emulation model. The home page of openMSX can
be found here: http://openmsx.sf.net/

Since openMSX is still targeted for developers, the authors do not really pay
attention to ease-of-use. The focus is getting perfect emulation. However, since
this emulator is already very good, it would be nice if non-insiders would be
able to play with it, too. For those people, we have written this HOWTO.
It explains how you can get the emulator on your system (i.e., how to get the
sources and how to compile them), how to configure it and how to use it to run
MSX software.

This HOWTO is mainly written by Manuel Bilderbeek, an openMSX developer who does
mainly beta testing and other mainly non-coding stuff and Jorrith Schaap,
someone who just wants to play around with the emulator and came with the idea
of this document.

The latest version of this HOWTO can be found in the CVS directory of openMSX.
Try this link:
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/openmsx/openMSX/doc/openMSX-HOWTO.txt?rev=HEAD&content-type=text/vnd.viewcvs-markup

Now, let's start with the HOWTO. Here's what to do if you want to start using
openMSX...

1. Get the source code
   -------------------

You have some options here. You can get the current CVS version, a CVS snapshot
(which is a very recent CVS version), or download a released version. The first
option is more complicated in case you're not familiar with CVS, but gives you
the very latest version (which may have grave bugs and not even compile (which
is rare)), while the last gives you a more reliable version that shouldn't give
much problems and is easier to download and compile, but it also means it
doesn't have all cool features and may still show some old bugs. The snap shot
is an alternative for the first option, in case you find CVS too complicated.
The idea is that it is lagging only a few days at most compared to the current
CVS version. You can find a link to it on the web page.

Releases are intended for general users, CVS (and snapshots) is intended for
(would be) developers, heavy testers and people who want to follow new
developments closely. It might be a good idea to play with a release first. If
you like what you see and want to get in deeper, you can switch to CVS later.

If you chose a method that didn't give you a very recent release, it would be
better to continue reading the HOWTO that is included in your just downloaded
version. It should be in the directory openMSX/doc. The rest of this text
assumes you are reading the HOWTO that suits your openMSX version.

1.a Retrieve normal releases
    ------------------------

This is the easy way: simply download them from the following address:

http://sourceforge.net/project/showfiles.php?group_id=38274&release_id=103487

After downloading, type

tar xzvf openmsx-VERSION.tar.gz

in which VERSION is the current openMSX version, or use the file name you saved
the tar.gz file with. (The directory that is created by uncompressing the
tar.gz file is called the top of the source tree.)

1.b Retrieve stuff from CVS
    -----------------------

For bleeding-edge versions of openMSX, you can get the sources from CVS.  (Or
download the snap shot, see above.)

In short, you use CVS (which is a system for version management) to retrieve
the latest version of the source code of openMSX. This means you will need to
install a CVS client.

With the following line you can login to the openMSX CVS server.

cvs -d:pserver:anonymous@cvs.openmsx.sourceforge.net:/cvsroot/openmsx login

In this line you specified where you want to retrieve the files from (the
:pserver stuff), as who you want to retrieve the stuff (since you're not a
developer, anonymous will do), and what project you want to retrieve (openmsx in
this case).

You will be prompted for a password. Just press enter if you're logging in as
user anonymous.

Example output:

jorrith@jardel openmsx $ cvs -d:pserver:anonymous@cvs.openmsx.sourceforge.net:/cvsroot/openmsx login
Logging in to :pserver:anonymous@cvs.openmsx.sourceforge.net:2401/cvsroot/openmsx
CVS password:
jorrith@jardel openmsx $

Now you can retrieve the latest sources with the following command

cvs -d:pserver:anonymous@cvs.openmsx.sourceforge.net:/cvsroot/openmsx export -D now openMSX

or, alternatively

cvs -z3 -d:pserver:anonymous@cvs.openmsx.sourceforge.net:/cvsroot/openmsx checkout openMSX

This will create a directory called openMSX for you in the current directory.
If you want to update your source tree later, go to this directory again and
type cvs update -d (the -d means that it will create new directories too.) This
only works if you used the second method ("checkout").
The latter method also creates the CVS administrative directories necessary to
perform commits and updates.

2. Compiling
   ---------

Before compiling, you need to have certain libraries installed. On my system
(which is a Debian testing one), they are called:

libsdl-image1.2 - image loading library for Simple DirectMedia Layer 1.2
libsdl-image1.2-dev - development files for SDL 1.2 image loading library
libsdl-mixer1.2 - mixer library for Simple DirectMedia Layer 1.2
libsdl-mixer1.2-dev - development files for SDL1.2 mixer library
libsdl-net1.2 - network library for Simple DirectMedia Layer
libsdl-net1.2-dev - Development files for SDL network library
libsdl1.2-dev - Simple DirectMedia Layer development files
libsdl1.2debian - Simple DirectMedia Layer
libsdl1.2debian-all - Simple DirectMedia Layer (with all available options)

So, you need a lot of SDL packages; the run time ones and also the developer
packages (we're compiling here!). You need the SDL_image, SDL_mixer, SDL_net
(for future usage) and the general SDL libs.

Furthermore, you need
libxml2 - GNOME XML library
libxml2-dev - Development files for the GNOME XML library
libpng12-0 - PNG library - runtime
libpng12-0-dev - PNG library - development
g++ - The GNU C++ compiler. (2.95.3 or 3.2 is recommended for now)

The package uses the GNU Automake utilities. Thus, you also need:
automake - A tool for generating GNU Standards-compliant Makefiles.
autoconf - automatic configure script builder
libtool - Generic library support script
m4 - a macro processing language

And, for some optional features of openMSX, you need openGL support, runtime and
development; i.e. you'll need packages like xlibmesa-dev and xlibmesa3 (see
below in section 8). This can depend on your graphics hardware.

Probably you even need some more, which I don't know by heart. They should all
be needed as dependencies for the SDL and XML packages, though. And it should be
checked by the configure scripts anyway.

If you are very experienced in compiling stuff in Linux, you can skip the rest
of this chapter and go to chapter 3. Others, please skip the next sentence.
Quick building instructions: the usual ./autogen.sh; ./configure (or
./config-686.sh for Pentium Pro); make for the CVS sources and just ./configure;
make for the tar.gz released version; note that there is no make install yet.

After you installed at least the above mentioned packages, go to your openMSX
source tree again. Then, run the following command, in case you used CVS to get
the sources:

./autogen.sh

This will generate the appropriate configure and make stuff.

If you get the following line:

configure.in: 147: required file `./ltmain.sh' not found

don't worry. This is just a warning you get if you run autogen.sh for the first
time. Run it again to fix this.

Now it's time for the tools to probe the system configuration.
Just type the following command:

./configure

If you have a Pentium II or higher machine, instead configure it like this:

./config-i686.sh

This will let openMSX compile with optimisations for your system's CPU.

You will see loads of checks for available stuff and so on... Just ignore it,
except if it exits with any errors. This probably means you will have to
install more packages, the error message will tell you what is broken. If the
problem is with openMSX, please file a detailed bug report on our SourceForge
site. If possible, attach the config.log file that is made as part of the
configure step to the bug report, in case there is a ./configure error.

After the (successful) configure step, it's time to compile
everything. Type

make

and everything will be compiled. If you get errors during compilation, there may
be something wrong that was not detected by configure. Try to see if you forgot
to install one of the mentioned packages. (Note that you need also the
developer's versions and not only the run time libraries.)

There is at the moment no working make install, which would have installed the
compiled binary in a logical directory in your system, so that it is easily
usable. We will do something about this in chapter 5, however.

3. Preparing the emulator for a first test
   ---------------------------------------

Two options here. You can either try to run a real MSX, but for that you need
the ROMs for that MSX. They are not supplied with openMSX. An alternative is
using CBIOS: an MSX compatible BIOS made by BouKiChi, which can be used to run
most ROM games with openMSX. For a first test, you don't need to do anything to
use CBIOS. Otherwise, here are the instructions for using a simple machine. If
you want to use CBIOS, you can skip the rest of this section. But you may want
to read it later, because it contains some valuable hints.

First, get the needed roms for the emulator. You need the following roms:

- an MSX2 BIOS/BASIC rom (other emulators may call this MSX2.ROM, it contains
  the BIOS and BASIC, see below)
- a disk rom (often called DISK.ROM)
- the subrom (often called MSX2EXT.ROM)
- and, optional, the 64kB FMPAC.ROM, if you would like to use the FM PAC.

Suppose you have the following files:
msx2.zip
msx2ext.zip (rename to nms8250-sub.rom)
disk.zip (rename to nms8250-disk.rom - this rom
image may be patched though, I'm not sure if it works)
fmpac.zip

The rom in msx2.zip (like MSX2.ROM) contains both the BIOS and the basic. To be
able to use this with openMSX, we either have to split the roms, or we can
modify the default config file we are going to use for the test a bit.

The first option: splitting. This requires some extra UNIX commands to get the
right ROM files for our default config file. The advantage is that we don't need
to modify the latter. The other option is explained below, but please keep on
reading.

Here's a way to do the splitting:

dd if=MSX2.ROM of=nms8250-bios.rom ibs=16384 count=1
dd if=MSX2.ROM of=nms8250-basic.rom ibs=16384 count=1 skip=1

The resulting ROM files should be exactly 16384 bytes in size. If not, they will
probably cause the emulated MSX to hang. Try to find a better MSX2.ROM.

Now that you have all roms, you can place them into the
share/machines/Philips_NMS_8250/ directory for
now. You noticed I let you rename the ROMs. This is because one of the
configuration files (which configs openMSX to emulate a Philips NMS-8250),
included in the openMSX distribution, assumes those names for the ROM files. In
other words: we are going to emulate a Philips NMS 8250.

If you don't want to split a BIOS+BASIC ROM file as is explained above, you can
also use this combined file. For this, you will need to edit the default
configuration file we are going to use, though. You will need to change the
following in share/machines/Philips_NMS_8250/hardwareconfig.xml. Look for the
line <device id="biosrom"> and the piece of XML just below that, which is
starting with <device id="basicrom">. Delete these two pieces of XML if you want
to use a combined ROM (e.g. MSX2.ROM):
  <device id="MSX BIOS with BASIC ROM">
    <type>Rom</type>
    <slotted> <ps>0</ps> <ss>0</ss> <page>0</page> </slotted>
    <slotted> <ps>0</ps> <ss>0</ss> <page>1</page> </slotted>
    <parameter name="filename">MSX2.ROM</parameter>
  </device>
This will tell openMSX to use the first 16kB of the specified file as BIOS ROM
in page 0 and the second 16kB as BASIC ROM file in page 1.
Since we didn't change the other default filenames for the ROMs, copy your
renamed ROM files (as described at above) and your 32kB BASIC+BIOS file (e.g.
MSX2.ROM) to the directory share/machines/Philips_NMS_8250/ for now.

You can also get the ROMs from your real MSX of course. I'm not going to explain
how to do that in this HOWTO though.

Later, you may want to emulate a specific MSX. openMSX provides some premade
configuration files for that, but we can not distribute the ROM files for them.
You need to dump them from your own machine or find another way to get them.

4. Starting the emulator for the first time
   ----------------------------------------

Now we can try starting the emulator for the first time!
Go to your src directory (e.g. openMSX/src).

If you didn't get ROMs, you can use CBIOS.
Give the following command:

./openmsx -setting ../share/settings.xml ../share/machines/cbios-msx2/hardware.xml

Or, if you did get the ROMs as mentioned in section 3, give the following
command:

./openmsx -setting ../share/settings.xml ../share/machines/Philips_NMS_8250/hardware.xml

Now the emulator should work, i.e. you will see the opening screen of CBIOS or
the MSX boot logo scrolling up when you got ROMs, all in a window. What did we
just do, actually? We started openMSX and told it that it should use the
settings defined in the file settings.xml (which is in the directory share/) and
that it should emulate a fantasy MSX machine with the CBIOS (or a Philips
NMS-8250), whose hardware is described in the file cbios-msx2/hardwareconfig.xml
(or Philips_NMS_8250/hardwareconfig.xml), in share/machines/. This is basically
how one uses openMSX. We'll make it easier below.

If you want to use real MSX ROMs, go back to step 3.

5. Installing
   ----------

To install openMSX, run the following command:

make install

This installs openMSX, by default in /opt/openMSX. You can override this
location by specifying "--prefix=location" to "configure"/"config-i686.sh".
Note that only root has rights to write to system-wide directories such as
/opt, so you may have to do "su" before "make install".

The binary of the latest version is about 36MB, most of which is debugging
symbols. If you don't plan on any debugging and want a smaller executable,
you can "strip" the binary (reducing it to under 2MB). Instead of running
"make install", run:

make install-stripped

If you want an even smaller binary, then after "make install-stripped" you
can run gzexe on the binary:

gzexe /opt/openMSX/bin/openmsx

This just compresses the binary, but keeps it still executable.
For this you need the gzip package. But probably you have that already.
See also man gzexe.

The rest of this chapter discusses setting up a ".openMSX" configuration
directory in your home directory. This is not strictly necessary, but it allows
you to customize the openMSX settings and add new MSX machines and hardware
extensions to run in openMSX. Manuel Bilderbeek will tell you how he did it.

I created a directory with the name .openMSX in my home dir. There, I created
the subdirectory share/. This is one of the directories that openMSX looks in,
to find the (default) settings.xml and romdb.xml (a ROM database to identify
ROM mapper types). So, .openMSX/ contains settings and other user specific
openMSX files. It also contains the machine configurations, in the subdirectory
share/machines/. The name of this subdirectory is important: openMSX searches
here for those machine configurations. In this share/machines/ directory, all
machines have their own subdirectory. I created my personal MSX configuration
(see below) in the directory mymsx/ under /share/machines/.  Note that hardware
configurations should have the name 'hardwareconfig.xml' in these machine
directories. Also the ROM files needed for those machines should be put in
their own directories. In my case, this share/machines/ directory is just a
symlink to the share/machines directory of the openMSX CVS tree. Of course, for
the machines to work, they need to have the ROM files specified in the
hardwareconfig.xml files.

In ~/.openMSX also some decorations like ConsoleBackgrounds (in the
subdirectory share/skins, see below) and other related files should be stored.
You need settings.xml also here (in share/), unless you want to specify it
manually on the command line with the -setting option, as we have done above.
In settings.xml you can also specify what machine should be used by default.
Edit the file and you will see how to do that. Also, in a subdirectory share/,
romdb.xml should be put. Personally, I used a symbolic link to my CVS source
tree version.

Furthermore, I created a subdirectory extensions/ in ~/.openMSX/share, which is
also a symbolic link to share/extensions in my CVS tree. This is one of
the directories openMSX searches in when you use the -ext command line option.

With this option you can specify an `extension', which is in most cases an
external cartridge with some special hardware in it (e.g., a Panasonic FS-CA1
MSX Audio cartridge, an IDE interface, an FM-PAC, or an MSX-DOS2 cartridge). It
works similarly to the share/machines/ directory and the -machine command. At
the moment, you can just put an XML file with the hardware discription of that
cartridge in its own subdirectory in this directory. If you have an XML file
that describes an MSX-DOS 2 cartridge, e.g., you can create a subdirectory
msxdos2 here, in which you put the file hardwareconfig.xml (which is that
description of the MSX DOS 2 cartridge) and the ROM file. Then you can use `-ext
msxdos2' on the command line to use it.  So, the ROM files that are needed for
the extensions have to be in their subdirectories also, if there is no path
given in the hardware description XML file. We prefer to put the ROM files in
their own subdir 'roms' though, to seperate them from other files that could be
put in such an extension directory.

/home/manuel/.openMSX:
drwx------    4 manuel   manuel       4096 Feb 17 22:00 persistent/
drwx------    2 manuel   manuel       4096 Mar 29 14:28 share/


/home/manuel/openMSX/share:
lrwxrwxrwx    1 manuel   manuel         50 Mar 29 13:14 extensions -> /home/manuel/cvs/openmsx/openMSX/share/extensions//
lrwxrwxrwx    1 manuel   manuel         48 Mar 29 12:15 machines ->
/home/manuel/cvs/openmsx/openMSX/share/machines//
lrwxrwxrwx    1 manuel   manuel         46 Feb 26 22:41 romdb.xml -> /home/manuel/cvs/openmsx/openMSX/src/romdb.xml
-rw-------    1 manuel   manuel       2391 Feb 18 20:46 settings.xml
lrwxrwxrwx    1 manuel   manuel         45 Mar 29 14:28 skins -> /home/manuel/cvs/openmsx/openMSX/share/skins//

/home/manuel/.openMSX/share/skins:
-rw-------    1 manuel   manuel      21203 Mar 24 23:27 ConsoleBackground.png
-rw-------    1 manuel   manuel       6016 Mar 24 23:27 ConsoleBackground1.png
-rw-------    1 manuel   manuel      13101 Mar 24 23:27 ConsoleBackground2.png
-rw-------    1 manuel   manuel       3348 Mar 24 23:27 ConsoleBackground3.png
-rw-------    1 manuel   manuel       5136 Mar 24 23:27 ConsoleBackground4.png
-rw-------    1 manuel   manuel       6602 Mar 24 23:27 ConsoleBackground5.png
-rw-------    1 manuel   manuel       1471 Mar 24 23:27 ConsoleFont.png
-rw-------    1 manuel   manuel       1402 Mar 24 23:27 ConsoleFont1.png

/home/manuel/.openMSX/share/machines:
drwx------    3 manuel   manuel       4096 Mar 28 23:59 National_CF-1200/
drwx------    3 manuel   manuel       4096 Mar 29 12:32 National_CF-2000/
drwx------    3 manuel   manuel       4096 Mar 28 23:59 National_CF-2700/
[snip!]
drwx------    3 manuel   manuel       4096 Mar 29 12:18 Sanyo_PHC-70FD2/
drwx------    3 manuel   manuel       4096 Mar 29 12:23 cbios-msx1/
drwx------    3 manuel   manuel       4096 Mar 29 12:23 cbios-msx2/
drwx------    2 manuel   manuel       4096 Feb 19 22:29 mymsx/

/home/manuel/.openMSX/share/extensions:
drwx------    4 manuel   manuel       4096 Mar 29 13:37 Panasonic_FS-CA1/
drwx------    3 manuel   manuel       4096 Mar 25 20:52 audio/
drwx------    4 manuel   manuel       4096 Mar 29 13:33 fmpac/
drwx------    4 manuel   manuel       4096 Mar 29 13:16 ide/
drwx------    4 manuel   manuel       4096 Mar 29 14:12 msxdos2/
drwx------    3 manuel   manuel       4096 Mar 25 20:52 scc/
drwx------    3 manuel   manuel       4096 Mar 25 20:52 scc+/

/home/manuel/.openMSX/share/extensions/fs-ca1:
-rw-------    1 manuel   manuel        517 Feb 23 16:00 hardwareconfig.xml
drwx------    2 manuel   manuel       4096 Mar 29 13:37 roms/

/home/manuel/.openMSX/share/extensions/fs-ca1/roms:
-r--------    1 manuel   manuel     131072 Mar 29 13:17 FS-CA1.ROM

/home/manuel/.openMSX/share/extensions/ide:
-rw-------    1 manuel   manuel        668 Dec 18 21:21 hardwareconfig.xml
-rw-------    1 manuel   manuel   107373568 Nov 10 23:01 hd.dsk
drwx------    2 manuel   manuel       4096 Mar 29 13:16 roms/

/home/manuel/.openMSX/share/extensions/ide/roms:
-rw-------    1 manuel   manuel     131072 Nov  3 01:35 IDE210.ROM

/home/manuel/.openMSX/share/extensions/msxdos2:
-rw-------    1 manuel   manuel        477 Feb 23 15:45 hardwareconfig.xml
-rw-------    1 manuel   manuel      65536 Oct 14 22:00 msxdos22.rom

The directory persistent is automatically created when you close openMSX. There,
persistent states of your MSX machines will be saved: the Real Time Clock
settings, SRAM contents, etc.

Note that the config syntax is still subject to changes, so XML files from one
release may not be compatible with those of other releases. If you want to be
really safe, keep a separate binary + configs per release/CVS date.

Now, if you have done something similar as above, you can finish this by
creating a small shell script in your ~/bin/ directory, that makes it easier to
run openMSX. I have one like this, named "openmsx":

---------------------BEGIN SHELL SCRIPT---------------------
#!/bin/bash

BINARY=/home/manuel/cvs/openmsx/openMSX/src/openmsx
VERSION=`$BINARY -h | head -n 1 | cut -d" " -f 2`
BINARYDATE=`stat --format=%z $BINARY | cut -d" " -f 1`
BUILD=$BINARYDATE-i686
DEFAULT_OPTIONS=

echo "Executing openMSX version 0.2.1 alpha $BUILD"

$BINARY $DEFAULT_OPTIONS "$@"
---------------------END SHELL SCRIPT---------------------

The variable BINARY contains the location of the openmsx binary that I built
from the CVS tree. You can modify this for your own situation of course. The
line below gets the file time of that binary, so that the script can show this
build date. The last line executes the binary, using some default options that
are defined in DEFAULT_OPTIONS. At the moment, this string is empty. The i686
means that I used the ./config-i686 way to configure, see section 2.

Note that you don't need this script at all. You can also simply create a
symlink in a directory where your shell searches for programs to the openMSX
binary.

As as I said above, I'm using a manually configured MSX machine, that is
described in ~/.openMSX/share/machines/mymsx/hardwareconfig.xml. So, I
configured in settings.xml that mymsx is the default machine to emulate. The
default settings.xml also contains a UserDirectories section. In this section
you can specify directories in which openMSX should look for to find files that
you mention on the command line or in the Console (see below). If you have some
big directory with a lot of disk images, e.g., you can add a line with that
path to this section, so that you don't have to specify the whole path anymore.
Use this to make things just a little more comfortable.

If you want to emulate another machine that the one you specified as default
machine, use the -machine commandline option. Example:
openmsx -machine mymsx
will start openMSX with the configuration specified in
~/.openMSX/share/machines/mymsx/hardwareconfig.xml.

Make sure that starting openMSX by just typing 'openmsx' in your shell works
now, with your default machine configuration. For now, I'm assuming that you are
emulating the Philips NMS 8250.

This concludes this section.

6. Running MSX software (simple)
   -----------------------------

Since step 5 made things very comfortable for us, we can try to run some
software first, just to get used to the openMSX command line. This is very basic
stuff here, though.

Suppose you want to run the ROM file "galious.rom". Then you simply type:

openmsx galious.rom

and the emulated NMS 8250 (as it still is, now) will run the game. (Of course,
in this case, the file galious.rom should be in the current directory or in one
of the UserDirectories you specified in the settings.xml.)

If things go terribly wrong, openMSX may have failed to detect that the
specified file was a ROM file. You can then indicate this by typing:

openmsx -cart galious.rom

To run a disk image, you can type:

openmsx relax.dsk

for example. Or, if the auto detection of the file fails:

openmsx -diska relax.dsk

With this information, you can run most of the existing MSX software.

A completer command line options help can be seen by typing:

openmsx -help

The default key mapping is:
F12	- Quit
F11	- Mute audio
F10	- Console (see section 8) 
F9	- Throttle (maximum speed)
F8	- MSX STOP key
F7	- MSX SELECT key
L-ALT	- MSX GRAPH key
R-CTRL	- MSX CODE key
Pause	- Pause the emulator
PrtScr	- Toggle full screen

Some of those, you can tweak in the settings.xml file.

7. Adding MSX devices to your config file
   --------------------------------------

OK, a standard NMS-8250 is a bit dull. Let's add some devices.

Normally, devices can be added by editing the XML config file. So, let's make a
copy of Philips_NMS_8250.xml and put it in ~/.openMSX/share/machines/mymsx/
under the name of hardwareconfig.xml. It's the config we are going to play with.

There is a special config file in the source tree that isn't usable by itself,
but contains XML fragments of some possible devices currently implemented in
openMSX. This file is called "exampleconfigs.xml" and is currently located in
the same directory as this file, doc/. It is very convenient to copy and paste
parts of it to your own mymsx/hardwareconfig.xml. Of course, you can also use
fragments from other existing configurations that can be found in
share/machines or share/extensions.

To add an FM PAC to the 8250, just copy this part from the exampleconfigs.xml to
some place in your mymsx/hardwareconfig.xml file (between the <msxconfig> and
</msxconfig> tags!):

  <device id="FM PAC">
    <type>FM-PAC</type>
    <slotted> <ps>2</ps> <ss>0</ss> <page>1</page> </slotted>
    <parameter name="filename">fmpac.rom</parameter>
    <parameter name="volume">9000</parameter>
    <parameter name="mode">left</parameter>
    <parameter name="loadsram">true</parameter>
    <parameter name="savesram">true</parameter>
    <parameter name="sramname">fmpac.pac</parameter>
  </device>

You can make some settings, too. The number in the <ps> tag indicates the
primary slot of the MSX you're going to emulate. In this case the second
cartridge slot of the NMS-8250 is used. <ss> means sub slot. Our NMS-8250
doesn't have an expanded slot in slot 2, so we have to specify 0 here. (The
MotherBoard config part at the top of the config file says what slots are
expanded; a normal 8250 has slot 3 expanded.)
The parameter filename can be adjusted to the name of your (64kB!) FM-PAC ROM
file (note: if the file is not 64kB (65536 bytes) in size, it won't work).
"mode" says to what channel the FM-PAC's sound will be routed. "loadsram" and
"savesram" tell openMSX that the SRAM of the FM PAC can be loaded and saved.
"sramname" specifies the file name for this. The saved files are compatible with
the files that are saved by the (real) FM-PAC commander's save option.

After saving your config and running openMSX again, you should be able to get
the FM PAC commander with CALL FMPAC in the emulated MSX!

Alternatively, if you have setup an FM PAC hardwareconfig.xml file in
~/.openMSX/share/extensions/fmpac e.g., you can also use `-ext fmpac' to use an
FM PAC. But, as I just said, you need to have a hardware description in that
subdirectory of share/extensions/, see chapter 5. Fortunately, openMSX comes
with a predefined FM-PAC extension. You only need to add the directory 'roms' in
share/extensions/fmpac and put the FMPAC.ROM there.

In a similar fashion, you can also add an MSX-Audio device (<device
id="MSX-Audio">, note that some programs also need the MSX-Audio-Midi device to
detect the Music Module; this device is at the moment not fully implemented
though), an empty SCC cartridge (<device id="Empty SCC Cartridge">), etc. Just
browse the exampleconfigs.xml file and see what you can find.  Remember that
you can not put two devices in the same (sub)slot! You may need to add a slot
expander, by simply setting a slot's subslotted parameter to "true" in the
MotherBoard config tag at the top of the file. On the other hand, not all
devices need a slot. An example is the MSX-Audio device.

Another thing you may want to change: the amount of RAM of the MSX: change the
"size" parameter in the "Main RAM" device config.

If you understand the basics of XML, you should be able to compose most of your MSX now!

8. Using the emulator (more advanced)
   ----------------------------------

Renderers

At the moment, there are three working renderers. A renderer is a part of the
emulator that generates the graphical part of the emulation: the MSX 'screen'.

The default renderer is called SDLHi. This one uses a window of 640 by 480
pixels to be able to display all the screen lines, even when interlacing is used
on the MSX. This renderer is not using any hardware acceleration and has a
steady CPU time consumption. The CPU load can be quite high though. It is about
50% on my Athlon XP 1600+, when emulating a 3.5MHz MSX.

A very good alternative for the Hi renderer is called SDLGL. This renderer uses
openGL instructions to optimise the rendering. Because part of the rendering is
done by the graphics hardware, the CPU load can vary a lot. Also, you need to
have the GLX module loaded in your X server and also accelerated graphics (DRI).
You can verify this by typing 'glxinfo' on the command line. Direct rendering
should be enabled to benefit from this renderer. GL also makes some effects
easier: when using the SDLGL renderer, there is a blur setting and a scanline
setting (see Console), to imitate a TV screen. This does not work properly with
all graphics cards, though. It should work with NVidia cards, at least. Note
that the GL renderer is only available when the openGL development files (gl.h
is one of them) were installed on the computer at compile time. This will be
checked by the configure script.

The third working renderer is called SDLLo. This renderer uses a window of only
320 by 200 pixels, which means that part of the MSX screen will be omitted. An
'interpolation' to reduce this problem was added for 24bpp visuals.  I don't
recommend to use this renderer, unless you have an extremely slow computer.

You can set the renderer in the settings.xml file. Look for <config
id="renderer">.  You can also specify there whether the emulator should switch
to full screen when started. You can also switch renderer from the Console (see
below).

Console

When the emulator is running, you can get the "Console" by pressing F10 when
the focus is on the emulator window. This will give you a command line in the
openMSX window. Typing 'help' gives a list of commands. They are described in
the file doc/commands.txt in the source tree. The console is mostly used to
change disk images, plug in joysticks or mice, make settings and to define
key bindings. You can specify a background image and the font in the config
file (<config id="Console">). The png files need an alpha channel (transparency
information) though.
An interesting console command is 'set'. You can use it to change the various
settings. E.g., you can use it to set the renderer that is to be used. And the
blur and scanline setting of the GL renderer can be tweaked with it. Settings
that have only two possible values can also be toggled with the toggle command
(an example is the default key binding of Print Screen to 'toggle fullscreen',
see also below). A complete list of settings should be in the file commands.txt
in the doc directory.

Renderer accuracy

Another example of the settings that you can specify in the Console is the
accuracy of the rendering. There are currently only two options: `line' and
`pixel'. The latter is still very unoptimised (and thus slow), but it will
enable you to run the Unknown Reality real time oscilloscope almost flawlessly!
Just type "set accuracy pixel" in the console.

AutoCommands and KeyEventInserter

In the config file section AutoCommands, you can specify some console commands
that should be executed automatically. See the settings.xml or
exampleconfigs.xml file for some examples. The settings.xml file uses this to
create the default key bindings.  
You can also use it to make default settings that are done with Console
commands. In my case I set blur and scanline to 0, since they don't work
correctly with my Radeon drivers.  The KeyEventInserter section can be used to
have something typed into the MSX after it booted. Again, see the
exampleconfigs.xml file. Examine this file to learn what you can configure more.

Running tape games

openMSX supports WAV files for tape emulation! Just configure your MSX with a
cassette port:
     <config id="CassettePort">
     </config>
Then type in the console:
     plug cassetteport cassetteplayer
     tape <file>.wav
And then in MSX Basic, type:
     run"cas:"
(or another command to load the program on 'tape'.)
You can also use the so-called CAS files. In the Console, type:
     tape <tapeimage>
and
     tape eject
to remove the tape from the virtual cassette player.

Other Console commands

You can reset your MSX with the Console command `reset'. 
If the MSX goes too fast or too slow, adjust the emulation speed with the
`speed' setting, which has the speed percentage as parameter. So, typing `set
speed 120', will let the emulated MSX run at 120% of normal MSX speed.
To connect a mouse, you can also use the `plug' command:
    plug joyporta mouse
will connect a mouse to joystick port A.
If you want openMSX to emulate the blinking interlace effect as can be seen on a
real MSX, try "deinterlace off"... I recommend to turn it on though, the
blinking is quite irregular on most systems and thus a pain for the eyes.
You can also change disks at run time of course. Just type
    diska <diskimage>
in the Console to put the specified disk image in drive A.
Again, the full list of Console commands can be found in doc/commands.txt and
when typing `help' in the Console itself. You can also type `help <command>' to
get some help about a specific Console command.


9. Reporting bugs and giving feedback
   ----------------------------------

Since openMSX is still in heavy development, feedback and bug reports are very
welcome!

If you encounter problems, go visit the SourceForge page of openMSX:
http://sourceforge.net/projects/openmsx/

Then click on "Tracker". This will show you four trackers (at the moment). Use
the bug tracker to look for bugs and post new ones. You can use the Support
Request tracker to submit support requests. Feature requests can also be
submitted in the Feature Requests tracker. 
You can also send an e-mail to the openMSX developer's mailing list:
openmsx-devel@lists.sourceforge.net. See the project page on SourceForge.

For experienced users: if you get a crash, try to provide a gdb backtrace
(don't use strip on the openMSX executable then!). 

In any case, try to give as much information as possible when you describe your
bug or request.

10. Some notes
    ----------

Note: the current official openMSX was only tested on Linux.  
If you have some C++ knowledge, please try and compile it on other systems.
Recently, a Windows port was created by Reikan. It is not mainstream yet, but
we hope it will be, soon. On the openMSX web site you can find a link to this
port.
If you try to port openMSX to another OS, you will probably encounter some
problem; please report them to the openMSX developers so they can fix them.

Note: as already mentioned, there is an alternative for the copyrighted MSX
ROMs: you can also use the CBIOS, a home made MSX compatible BIOS, by BouKiChi.
There are config files for it in the share/machines directory. With this BIOS
you can only run an increasing number of ROM files. The files needed for the
CBIOS itself are in the Contrib/cbios directory. 

Note: to use a real disk, just specify "/dev/fd0" as a disk image. This is of
course a Linux (Unix, actually) specific feature, but for now it is usable. It
may be a bit slow though, with the FDC emulation enabled. It should be just as
slow as a real disk drive, however!

11. Have fun!
    ---------

OK, that's it for this HOWTO. You should be able to use most of the openMSX
features now. Just look at the exampleconfigs.xml file and the other machine and
extension configurations to discover some more details. After playing with
openMSX for a while, you will be able to find out all features. Have fun! And
don't forget to report bugs; it will speed up openMSX development when more
people test MSX software with openMSX and report any problems they encounter.
