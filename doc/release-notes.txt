Release Notes for openMSX 0.3.4 (2004-01-16)
============================================

This new release brings you the following improvements:
- Several fixes in VDP emulation; more games and demos work correctly.
- Added scalers for SDLHi. A scaler is an image filter which enlarges the
  MSX screen to PC resolution. The following scalers are implemented:
  * simple (original)
  * 2xSaI
  * Scale2x
  * hq2x
  Use "set scaler <name>" to select a scaler.
- Scanlines now work in SDLHi (previously, they only worked in SDLGL).
- Per-pixel alpha blending for console on SDLHi/SDLLo.
  This makes anti-aliased console fonts look better.
- Rendering fixes in Win32:
  * Fixed slowdowns in fullscreen mode.
  * Fixed console flickering.
- Switched to Jarek Burczynski's YM2413 core (MSX-MUSIC).
- Added high-pass IIR filter to mixer to avoid audio clipping.
- Added I/O device multiplexing: you can now safely insert an FM-PAC in
  an MSX turbo R, for example.
- Added screenshot feature.
  Default key bindings changed to put this under PrtScr.
  F12 toggles full screen now, while Quit is not mapped anymore, by default.
- Added Ren-Sha Turbo (autofire) emulation: "set renshaturbo <speed>".
- Added emulation of the MSX turbo R pause key.
- Added LED status of disk drives.
- Fixed harddisk image creation: automatically create or enlarge hd-image
  when the specified file doesn't exist or is too small.
- New console commands:
  * after: execute command after a certain time
  * alias/unalias: put long commands under a named alias
  * incr and decr: increase or decrease integer settings
    (useful when bound to a key, see "bind" command)
- "Enum settings" are now case insensitive, i.e. you can use SDLHi, sdlhi, or
  SdLhI now, if you mean the SDLHi renderer.
- Added a 'boosted' MSX2 configuration: a fantasy machine with lots of
  internal hardware. More of these will be added in future releases.
  The current configuration is still experimental; feedback is welcome.
- Added alternative build system ("alternative.mk"), which is more flexible
  and easier to maintain than the old system which uses GNU's auto* tools
  ("configure" and friends). The alternative system will replace the auto*
  system in the future, so please test it on your machine and report any
  problems. You can use it with "make -f alternative.mk" to compile and
  "make -f alternative.mk install" to install.
- Added support for Intel's ICC 8.0 compiler (only in alternative.mk).
- Added experimental support for Mac OS X (only in alternative.mk).
  Thanks to Jan Lukens (Jalu) for testing/debugging this.
- Dropped support for GCC 2.95 (please upgrade to GCC 3.x).
- Added the ability to control openMSX from an external process (launcher,
  debugger) using an XML-based control protocol. This is an experimental
  feature; the control protocol will change incompatibly in the next
  release.
  For an example client implementation, see Contrib/openmsx-control.cc.
  We're working on a new openMSX Catapult which uses this protocol.
- New features for external control clients:
  * renderer "none", which displays nothing.
  * "power" setting: enable or disable power to the MSX machine.
  * "restoredefault" command: restores a setting to the value specified in
    settings.xml.
  * "info" command: gets info such as lists of pluggables, renderers etc.
  * "keymatrixup"/"keymatrixdown" commands: manipulate the keyboard matrix.
- Added a debugger interface, accessible through the "debug" command.
  The following devices currently support this interface: CPU, I/O ports,
  memory, VDP and VRAM. Also it is possible to set breakpoints.
- Small improvements in debug device.
  The debug device is very useful for people developing MSX software in
  openMSX; read the manual for details.
- Added "vdpcmdtrace" setting: enable or disable VDP command tracing.

In "doc/manual/index.html" you can find a set of HTML manuals for openMSX.
Make sure you read this if you haven't used openMSX before, but also to
learn more about the new and changed features.

Known issues / caveats:
- In its current alpha state, openMSX is usable for power users, but its
  interface is not very friendly to casual users yet.
- Emulation is not perfect yet. However, in the emulator comparison of
  msx.org, openMSX scored highest on accuracy of all emulators tested
  and that was version 0.2.1.
  See the bug tracker on sourceforge.net for known bugs.
- Until we reach version 1.0.0, file formats can change in an incompatible
  way without backwards compatibility. Keep this in mind if you create
  machine descriptions, ROM database entries etc.
- This openMSX release was tested on Linux and Win32.
  Compilation on Mac OS X is reported to work, but openMSX does not run
  flawlessly on that platform yet.
  Running on BSD, Solaris, BeOS etc (wherever SDL runs) should be possible,
  but will probably not work out-of-the-box. If you are compiling on such a
  platform, please share your experiences (see below for contact info),
  so we can make openMSX more portable.
- CPU and graphics performance varies a lot, depending on the openMSX
  settings and the MSX hardware and software you're emulating.
  Some things run fine on a 200MHz machine, others are slow on a 2GHz
  machine. For performance tuning tips, see the Setup Guide.

openMSX Home Page:
  http://openmsx.sourceforge.net/
Project page on SourceForge:
  http://sourceforge.net/projects/openmsx/
Contact options:
- Send a message to the openmsx-user mailing list.
  Go to the SourceForge project page and look under "Lists".
- Talk to us on #openmsx on irc.freenode.net.
- Use the "Support" tab on the project page.

Have fun with your emulated MSX!
                                        the openMSX developers
