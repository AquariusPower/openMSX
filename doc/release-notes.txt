Release Notes for openMSX 0.10.1 (2014-05-01)
=============================================

This release fixes mostly bugs we introduced with 0.10.0 or were already
present for a bit longer... sorry for those, but most should be fixed now :)
There are also some small but nice additions...

Here's the list with all highlights:

MSX device support:
- fixed bug in YM2413 (FMPAC), that was audible in BPS Tetris
- added Sharp/Epcom HB-4000 80 column cartridge extension


New or improved emulator features:
- extended save_msx_screen script to take VDP(24) into acount
- fixed crash on Visual Studio build when using wav files (e.g. in the
  cassetteplayer)
- fixed crash on 32-bit Visual Studio build when recording videos without
  the -doublesize option
- fixed crash on 32-bit Visual Studio build when using scale_factor 3 and SDL
  renderer
- fixed waves shown upside-down in the SCC Viewer OSD widget
- fixed crash when loading a savestate that has JoyTap plugged in
- performance improvements:
  - several improvements that result in shorter start up time
  - fixed reverse-performance when using hard disks
- fixed handling of corrupt hardware configuration XML file
- fixed crash when MSX with TC8566AF FDC (e.g. turboR) crashed
- fixed possible hang up when reversing with harddisks
- fixed Tcl error when changing horizontal stretch in OSD menu
- fixed displaying of error messages on OSD
- Mac OS X MIDI support:
  - fixed MIDI output on Mac OS X (was not working for some applications)
  - added support for running status
  - added support for system realtime messages
  - added support for MIDI in
- fixed issues with on-screen-keyboard on Android 4.4
- added default keybindings for controllers targeted at gaming
- added mapping of B-control button to press CTRL or SHIFT in OSD keyboard
- added fine grained control in which slots carts and extensions will end up
- added support for single sided disk drives for dir-as-disk
- added support for hard disk images to the OSD menu
- added warning if ROM images with larger size than supported on real Konami
  and Konami SCC mappers are used


Build system, packaging, documentation:
- updated Windows build to Visual Studio 2013
- made compilation faster by removing more than 250 unnecessary includes
- even more use of C++11 features
- upgraded Tcl to 8.5.15
- added build support for 64-bit ARM
- added 256x256 pixel openMSX logo image and use it e.g. for Mac OS X icon
- fixed staticbindist build with more recent clang releases and for Mac OS 10.9
  SDK
- do not link against libraries in /usr/lib anymore on Mac OS X, only link
  against frameworks. This enables to compile against the default SDK.

And of course the usual various bug fixes.

In "doc/manual/index.html" you can find a set of HTML manuals for openMSX.
Make sure you read this if you haven't used openMSX before, but also to learn
more about the new and changed features.

CPU and graphics performance varies a lot, depending on the openMSX settings
and the MSX hardware and software you're emulating. Some things run fine on a
200 MHz machine, others are slow on a 2 GHz machine. For performance tuning
tips, see the Setup Guide.

openMSX is confirmed to run on the following operating systems: Linux, Windows,
Mac OS X, FreeBSD, OpenBSD and NetBSD; on x86, x86-64, PPC, ARM, MIPS and Sparc
CPU's. Running on other operating systems (wherever SDL runs) or CPU's should
be possible, but may require some modifications to the build system. If you are
compiling on a new platform, please share your experiences (see below for
contact info), so we can make openMSX more portable.

openMSX Home Page:
  http://openmsx.sourceforge.net/
Project page on SourceForge:
  http://sourceforge.net/projects/openmsx/
Contact options:
- Talk to us on #openmsx on irc.freenode.net.
- Use the forum on http://www.msx.org/forum/semi-msx-talk/openmsx
- Send a message to the openmsx-user mailing list.
  Go to the SourceForge project page and look under "Lists".

Thanks to all contributors for their feedback, support, bug reports, testing,
coding and other help!

Have fun with your emulated MSX!
                                        the openMSX developers
