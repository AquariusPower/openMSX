Keyboard related settings in hardwareconfig.xml

In section <PPI>...</PPI>:

Setting name: key_ghosting
Default value: true
Description:
If true, the emulator will press 'ghost' keys when user presses multiple keys
at once on crossing rows/columns of the keyboard matrix.
It must be set to true for all MSX models that suffer from this hardware problem

Setting name: keyboard_type
Default value: int
Description:
Indicates which type of keyboard the MSX has. It is used to load a file that
maps unicode characters to the appropriate key-combinations on the MSX.
The file-name will be: unicodemaps/unicode.<keyboard_type>

Setting name: has_keypad
Default value: true
Description:
Indicates if the emulated MSX model has a numeric keypad. If true, key-presses
on the host numeric keypad will be mapped to corresponding key-presses on
the MSX's numeric keypad.
If false, key-presses on the host numeric keypad will be ignored. User can
overrule this with a setting in the settings.xml file.

In section <PSG>...</PSG>:
Setting name: keyboardlayout
Default value: <empty>
Description:
Indicates if the "keyboard mode" flag (bit 6 on PSG register 14) must be set.
It will be set to "1" if keyboardlayout is JIS. Otherwise it will be 0.
In practice, this bit is only read by the Japanese ROM-BIOS to determine
the keyboard layout; Japanese-JIS or Japanese-ANSI
See http://map.tni.nl/articles/keymatrix.php for further details about
Japanese keyboard layouts.
Note that this setting is ignored by the keyboard driver of OpenMSX. The
keyboard driver only looks at the keyboard_type parameter in the PPI
section to determine which unicode to keycombination mapping to apply.


Keyboard related settings in settings.xml
Setting name: code_kana_host_key
Default value: RALT
Description:
Host key that maps to the MSX CODE/KANA key. It is especially usefull
for people with AZERTY host keyboard, on which the right-alt key has
a special function. It is called the alt-gr key and it used to enter
some characters (some keys are tagged with 3 characters; 
normal, key+shift, key+alt-gr)

Setting name: keypad_enter_key
Default value: KEYPAD_COMMA
Description:
There is a subtle difference between numeric keypad of MSX computers
and of most host computers; the MSX computers have a '.' and a ',' on
the numeric keypad. On the other hand, the host computers have a '.'
and an 'ENTER' key on the keypad.
In some respect it is logical that the 'ENTER' key on the host numeric
keypad is mapped to the 'normal' MSX 'ENTER' key. On the other hand, that
would make it impossible to enter the ',' on the MSX nummeric keypad.
Therefore, the user can choose whether the host numeric keypad ENTER
key should be mapped to the MSX numeric keypad ',' or to the main 'ENTER'
key.

Setting name: keymap-filename
Default value: <empty>
Description:
File with mapping from host keys to MSX keys. It is only used for special
keys for which no unicode character exists, like the SHIFT key, the ALT key
and so on. On the longer term, this file should become obsolete as most of
the special keys are very standardized and there are now new setting parameters
(like the keypad_enter_key parameter) to handle the few exceptional cases.
However, we keep it for the time being, just in case that there is some special
situation that is not yet covered by user setting parameters.

Setting name: always_enable_keypad
Default value: false
Description:
Some real MSX computers do not have a numeric keypad. OpenMSX will ignore
key presses on the host numeric keypad when emulating such an MSX model.
With this parameter, you can indicate that even on such MSX models, presses
on the host numeric keypad must be mapped to the MSX numeric keypad

Setting name: trace_key_presses
Default value: false
Description:
Show SDL key code, SDL modifiers and Unicode value for each key that
gets pressed on the host keyboard.
Also show Unicode value and corresponding MSX key-presses for characters
that get 'pasted' into the MSX by the console 'type' command.
This setting is especially usefull when defining unicode keymap files, so
that you can find out the unicode values belonging to certain keys/characters

