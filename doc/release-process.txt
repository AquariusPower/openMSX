openMSX Release Process
=======================

This is a kind of recipe for doing releases. Having it written down
decreases the change of forgetting a small but crucial step during the
hectic work of getting a release out.

Preparing for a release
-----------------------

- Tell all developers to commit only fixes.
- Sync with most recent C-BIOS release.
- Update libraries in the 3rd party build system to latest versions.
- Check that the "staticbindist" build still works, in particular on win32 and
  Mac OS X universal (default is native!).
- Verify the documentation is up-to-date.
  Currently most documentation is in "doc/manual".
- Write release notes in "doc/release-notes.txt".
- Add the change list to "doc/release-history.txt".
- Edit the version number in build/version.py:
    packageVersionNumber = '1.2.3'
  And set releaseFlag to True.

Creating a release candidate
----------------------------

- Update the release date in the release notes.
- Tag the SVN archive:
    svn copy \
      https://openmsx.svn.sourceforge.net/svnroot/openmsx/openmsx/trunk \
      https://<host>/svnroot/openmsx/openmsx/tags/RELEASE_1_2_3 \
      -m "Tagging release 1.2.3."
- Export the tagged code:
    svn export https://<host>/svnroot/openmsx/openmsx/tags/RELEASE_1_2_3 \
        openmsx-1.2.3
  This step makes sure that exactly the tagged code will be released.
  Export instead of checkout gets rid of the SVN admin directories.
- Create the distribution tar.gz file:
    make dist
- Save the created file somewhere you can find it again:
    mv derived/dist/openmsx-1.2.3.tar.gz <some_dir>/openmsx-1.2.3-rc1.tar.gz
  This is the release candidate.
- NOTE: for a Windows build, you also need a RC of Catapult!

Sanity check on release candidate
---------------------------------

This is a small check to be performed by the release coordinator.

- Test build:
  * Compile and check for warnings:
      unset OPENMSX_FLAVOUR   (and any other OPENMSX_ flags you have set)
      make
  * Test installation:
      su
      make install
- Start openmsx with your usual config.
- Verify the version number in the title bar.

If the sanity check is passed, distribute tar.gz to fellow developers and
testers.

Full test of release candidate
------------------------------

- Check behaviour with empty ~/.openMSX dir.
- Check that the default config (C-BIOS_MSX2+) works.
- Check random other configs.
- Do extensive testing with things that are known to work and likely to give
  problems (like Unknown Reality, Metal Limit).
- Do some valgrind runs to make sure there are no hidden problems.
TODO: More standard tests?

Repeat until release worthy
---------------------------

Create and test release candidates until a satisfactory release candidate
is made, which will become the release.

Last-minute patches have to be merged from "trunk" or the pre-release branch to
the tag directory.
TODO: Should we create a branch for every release?

Make the release public
-----------------------

Put the release on SourceForge:
- On the project page, choose "Project Admin", followed by "File Manager".
- Add a new folder for the new release 1.2.3 in the directory where the
  previous release is: click on the gear icon and choose "New Folder" and give
  it the name "1.2.3"
- Click the gear icon of the new folder and choose "Upload here" and select the
  file to upload. Repeat for all files for this release.
- Upload also the file "doc/release-notes.txt" to the same folder and edit its
  properties in the web interface to be 'Release Notes'.
- Select this file as release notes for the 1.2.3 folder. Verify on the Files
  tab of the project page if it actually worked :)
- For each folder, you can choose which file is for each platform. Set that up.

Announce:
- Post change list to msx.org.
- Post news item on sourceforge.net.
- Post news item on web site.

Finally:
- Put "Released openmsx-1.2.3." entry in the ChangeLog in SVN.
- Set RELEASE_FLAG to false in build/version.mk
- Update web site to point to new downloads.
- On the openMSX home page, update the lists "features of current release"
  and "features in development".
