openMSX Release Process
=======================

This is a kind of recipe for doing releases. Having it written down
decreases the chance of forgetting a small but crucial step during the
hectic work of getting a release out.

Preparing for a release
-----------------------

- Tell all developers to commit only fixes.
- Sync with most recent C-BIOS release.
- Check that the "staticbindist" build still works, in particular on win32 and
  Mac OS X universal (default is native!).
- Verify the documentation is up-to-date.
  Currently most documentation is in "doc/manual".
- Write release notes in "doc/release-notes.txt".
- Add the change list to "doc/release-history.txt".
- Edit the version number in build/version.py:
    packageVersionNumber = '1.2.3'
  And set releaseFlag to True.

Creating a release candidate
----------------------------

- Update the release date in the release notes.
- Tag the git archive:
  git tag -a RELEASE_1_2_3 -m "Tagging release 1.2.3."
  git push
- Export the tagged code:
  git archive RELEASE_1_2_3 -o openmsx-1.2.3.tar.gz
  This step makes sure that exactly the tagged code will be released.
- Untar-gz this file somewhere outside of any development area and change
  directory to it.
- Create the distribution tar.gz file:
    unset OPENMSX_FLAVOUR   (and any other OPENMSX_ flags you have set)
    make dist
- Save the created file somewhere you can find it again:
    mv derived/dist/openmsx-1.2.3.tar.gz <some_dir>/openmsx-1.2.3-rc1.tar.gz
  This is the release candidate.
- NOTE: for a Windows build, you also need a RC of Catapult!

Sanity check on release candidate
---------------------------------

This is a small check to be performed by the release coordinator.

- Test build:
  * Compile and check for warnings:
      unset OPENMSX_FLAVOUR   (and any other OPENMSX_ flags you have set)
      make
  * Test installation:
      su
      make install
- Start openmsx with your usual config.
- Verify the version number in the title bar.

If the sanity check is passed, distribute tar.gz to fellow developers and
testers.

Full test of release candidate
------------------------------

- Check behaviour with empty ~/.openMSX dir.
- Check that the default config (C-BIOS_MSX2+) works.
- Check random other configs.
- Do extensive testing with things that are known to work and likely to give
  problems (like Unknown Reality, Metal Limit).
- Do some valgrind runs to make sure there are no hidden problems.
TODO: More standard tests?

Repeat until release worthy
---------------------------

Create and test release candidates until a satisfactory release candidate
is made, which will become the release.

Last-minute patches have to be merged from "master" or the pre-release branch to
the tag directory.
TODO: Should we create a branch for every release?

Make the release public
-----------------------

Put the release on SourceForge:
- On the project page, make sure you're logged in. In the menu bar, click Files
  and then choose the "openmsx" folder.
- Add a new folder for the new release 1.2.3: click on "Add Folder" and give
  it the name "1.2.3". You can check the box for Staging the folder. Do this
  until the folder is complete for release.
- Click the new folder and choose "Add File" and select the
  files to upload.
- Click the 'i' icon to see the sha1sum of the file. Confirm it's the same as
  what you expect.
- Upload also the file "doc/release-notes.txt" to the same folder and click the
  'i' icon to rename it to "README_release-notes.txt". This will trigger the
  file release system to know that this file contains the release notes so that
  it will be displayed when browsing this folder.
- For each file, you can select in the 'i' icon menu that it is the default
  file for a certain OS. Set this up (choose
  openmsx-1.2.3-windows-vc-x86-bin-msi.zip for Windows, the dmg file for Mac
  and the tar.gz source code for the others).

Announce:
- Post change list to msx.org.
- Post news item on sourceforge.net.
- Post news item on web site.
- Post news and/or change list to openmsx-devel and openmsx-user mailinglists
  (at least one packager uses it to get a trigger)

Finally:
- Update web site to point to new downloads.
- On the openMSX home page, update the lists "features of current release"
  and "features in development".
- Set releaseFlag to False in build/version.py
- Update libraries in the 3rd party build system to latest versions, so that
  next release will profit from this and you won't forget it. Just before the
  release is too late (unless it's some minor security fix)!
