openMSX Release Process
=======================

This is a kind of recipe for doing releases. Having it written down
decreases the change of forgetting a small but crucial step during the
hectic work of getting a release out.

Preparing for a release
-----------------------

- Tell all developers to commit only fixes.
- Verify the documentation is up-to-date.
  Currently most documentation is in "doc/manual".
- Write release notes in "doc/release-notes.txt".
- Add the change list to "doc/release-history.txt".
- Edit the version number in build/version.mk:
    OPENMSX_VERSION=1.2.3
  And set RELEASE_FLAG to true.

Creating a release candidate
----------------------------

- Tag the SVN archive:
    svn copy \
      https://openmsx.svn.sourceforge.net/svnroot/openmsx/openmsx/trunk \
      https://<host>/svnroot/openmsx/openmsx/tags/RELEASE_1_2_3 \
      -m "Tagging release 1.2.3."
- Export the tagged code:
    svn export https://<host>/svnroot/openmsx/openmsx/tags/RELEASE_1_2_3 \
        openmsx-1.2.3
  This step makes sure that exactly the tagged code will be released.
  Export instead of checkout gets rid of the SVN admin directories.
- Create the distribution tar.gz file:
    make dist
- Save the created file somewhere you can find it again:
    mv derived/dist/openmsx-1.2.3.tar.gz <some_dir>/openmsx-1.2.3-rc1.tar.gz
  This is the release candidate.

Sanity check on release candidate
---------------------------------

This is a small check to be performed by the release coordinator.

- Test build:
  * Compile and check for warnings:
      unset OPENMSX_FLAVOUR   (and any other OPENMSX_ flags you have set)
      make
  * Test installation:
      su
      make install
- Start openmsx with your usual config.
- Verify the version number in the title bar.

If the sanity check is passed, distribute tar.gz to fellow developers and
testers.

Full test of release candidate
------------------------------

- Check behaviour with empty ~/.openMSX dir.
- Check that the default config (cbios-msx2) works.
- Check random other configs.
- Do extensive testing with things that are known to work and likely to give
  problems (like Unknown Reality, Metal Limit).
- Do some valgrind runs to make sure there are no hidden problems.
TODO: More standard tests?

Repeat until release worthy
---------------------------

Create and test release candidates until a satisfactory release candidate
is made, which will become the release.

Last-minute patches have to be merged from "trunk" or the pre-release branch to
the tag directory.
TODO: Should we create a branch for every release?

Make the release public
-----------------------

Put the release on SourceForge:
- Upload the release tar.gz to "ftp://upload.sourceforge.net/incoming/".
- On the project page, choose "Admin", followed by "File Releases".
- At the bottom, choose "Add Release".
- As the release name, type the version number ("1.2.3").
- For the Release Notes, select "doc/release-notes.txt".
- For the Change Log, select "doc/release-history.txt".
- Check "Preserve my pre-formatted text" and choose "Submit/Refresh".
  Now you should see the release notes and change history filled in in the
  edit boxes.
- Select the uploaded file from the file list and choose "Add Files and/or
  Refresh View".
- File info: "Processor = Any", "File Type = Source .gz".
  Finally, choose "Update/Refresh".
- Update the platform downloads. For Windows, Mac OS, Linux and *BSD, set the
  proper release files. This menu can be found next to "Manage Packages /
  Releases", under "Create / Edit Download Page".

Announce:
- Post change list to msx.org.
- Post news item on sourceforge.net.

Finally:
- Put "Released openmsx-1.2.3." entry in the ChangeLog in SVN.
- Set RELEASE_FLAG to false in build/version.mk
- On the openMSX home page, update the lists "features of current release"
  and "features in development".
