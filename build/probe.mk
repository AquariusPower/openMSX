# $Id$
#
# Replacement for "configure".
# Performs some test compiles, to check for headers and functions.
# Unlike configure, it does not run any test code, so it is more friendly for
# cross compiles.

# This Makefile needs parameters to operate; check that they were specified:
# - output directory
ifeq ($(OUTDIR),)
$(error Missing parameter: OUTDIR)
endif
# - command line to invoke compiler + options
ifeq ($(COMPILE),)
$(error Missing parameter: COMPILE)
endif
# - OS we're building for
ifeq ($(OPENMSX_TARGET_OS),)
$(error Missing parameter: OPENMSX_TARGET_OS)
endif

# Result files.
LOG:=$(OUTDIR)/probe.log
OUTHEADER:=$(OUTDIR)/probed_defs.hh
OUTMAKE:=$(OUTDIR)/probed_defs.mk


# OS Specific
# ===========

DISABLED_FUNCS:=
DISABLED_LIBS:=
DISABLED_HEADERS:=

SYSTEM_LIBS:=

# Initial value of DISABLED_LIBRARIES is set here.
include build/custom.mk

ifneq ($(filter 3RD_%,$(LINK_MODE)),)
# Disable Jack: The CassetteJack feature is not useful for most end users, so
# do not include Jack in the binary distribution of openMSX.
DISABLED_LIBRARIES+=JACK

# GLEW header can be <GL/glew.h> or just <glew.h>; the dedicated version we use
# resides in the "GL" dir, so don't look for the other one, or we might pick
# up a different version somewhere on the system.
DISABLED_HEADERS+=GLEW_H
endif

# Define default compile/link flags.
include build/probe_defs.mk
# Allow the OS specific Makefile to override if necessary.
include build/platform-$(OPENMSX_TARGET_OS).mk

DISABLED_HEADERS+=$(addsuffix _H,$(DISABLED_LIBRARIES))
DISABLED_LIBS+=$(DISABLED_LIBRARIES)


# Implementation
# ==============

# Resolve probe strings depending on link mode and list of system libs.

DEFCHECKGET=$(strip \
	$(if $(filter _undefined,_$(origin $(1))), \
		$(error Variable $(1) is undefined) ) \
	)$($(1))
RESOLVEMODE=$(call DEFCHECKGET,$(1)_$(2)_$(if $(filter $(1),$(SYSTEM_LIBS)),SYS_DYN,$(LINK_MODE)))

GLEW_CFLAGS:=$(call RESOLVEMODE,GLEW,CFLAGS)
GLEW_LDFLAGS:=$(call RESOLVEMODE,GLEW,LDFLAGS)
GL_GLEW_CFLAGS:=$(GLEW_CFLAGS)

JACK_CFLAGS:=$(call RESOLVEMODE,JACK,CFLAGS)
JACK_LDFLAGS:=$(call RESOLVEMODE,JACK,LDFLAGS)

PNG_CFLAGS:=$(call RESOLVEMODE,PNG,CFLAGS)
PNG_LDFLAGS:=$(call RESOLVEMODE,PNG,LDFLAGS)
PNG_RESULT:=$(call RESOLVEMODE,PNG,RESULT)

SDL_CFLAGS:=$(call RESOLVEMODE,SDL,CFLAGS)
SDL_LDFLAGS:=$(call RESOLVEMODE,SDL,LDFLAGS)
SDL_RESULT:=$(call RESOLVEMODE,SDL,RESULT)

SDL_IMAGE_CFLAGS:=$(call RESOLVEMODE,SDL_IMAGE,CFLAGS)
SDL_IMAGE_LDFLAGS:=$(call RESOLVEMODE,SDL_IMAGE,LDFLAGS)

SDL_TTF_CFLAGS:=$(call RESOLVEMODE,SDL_TTF,CFLAGS)
SDL_TTF_LDFLAGS:=$(call RESOLVEMODE,SDL_TTF,LDFLAGS)

TCL_CFLAGS:=$(call RESOLVEMODE,TCL,CFLAGS)
TCL_LDFLAGS:=$(call RESOLVEMODE,TCL,LDFLAGS)
TCL_RESULT:=$(call RESOLVEMODE,TCL,RESULT)

XML_CFLAGS:=$(call RESOLVEMODE,XML,CFLAGS)
XML_LDFLAGS:=$(call RESOLVEMODE,XML,LDFLAGS)
XML_RESULT:=$(call RESOLVEMODE,XML,RESULT)

ZLIB_CFLAGS:=$(call RESOLVEMODE,ZLIB,CFLAGS)
ZLIB_LDFLAGS:=$(call RESOLVEMODE,ZLIB,LDFLAGS)

# Determine which probes to run.

CHECK_FUNCS:=$(filter-out $(DISABLED_FUNCS),$(ALL_FUNCS))
CHECK_HEADERS:=$(filter-out $(DISABLED_HEADERS),$(ALL_HEADERS))
CHECK_LIBS:=$(filter-out $(DISABLED_LIBS),$(ALL_LIBS))

CHECK_TARGETS:=hello $(ALL_FUNCS) $(ALL_HEADERS) $(ALL_LIBS)
PRINT_LIBS:=$(addsuffix -print,$(CHECK_LIBS))

.PHONY: all init check-targets print-libs $(CHECK_TARGETS) $(PRINT_LIBS)

# Default target.
all: check-targets print-libs
	@$(PYTHON) build/probe_header.py $(OUTMAKE) > $(OUTHEADER)

check-targets: $(CHECK_TARGETS)
print-libs: $(PRINT_LIBS)

# Create empty log and result files.
init:
	@echo "Probing target system..."
	@mkdir -p $(OUTDIR)
	@echo "Probing system:" > $(LOG)
	@echo "# Automatically generated by build system." > $(OUTMAKE)
	@echo "# Non-empty value means found, empty means not found." >> $(OUTMAKE)
	@echo "PROBE_MAKE_INCLUDED:=true" >> $(OUTMAKE)
	@echo "DISABLED_FUNCS:=$(DISABLED_FUNCS)" >> $(OUTMAKE)
	@echo "DISABLED_LIBS:=$(DISABLED_LIBS)" >> $(OUTMAKE)
	@echo "DISABLED_HEADERS:=$(DISABLED_HEADERS)" >> $(OUTMAKE)
	@echo "HAVE_X11:=" >> $(OUTMAKE)

# Check compiler with the most famous program.
hello: init
	@$(PYTHON) build/probe_run_compiler.py \
		"$(COMPILE)" "$(COMPILE_FLAGS)" $(OUTDIR) $(LOG) $(OUTMAKE)

# Probe for function.
$(CHECK_FUNCS): init
	@$(PYTHON) build/probe_run_function.py \
		"$(COMPILE)" "$(COMPILE_FLAGS)" $(OUTDIR) $(LOG) $(OUTMAKE) \
		$@ $($@_FUNC) '$($@_PREHEADER) $($@_HEADER)'

$(DISABLED_FUNCS): init
	@echo "Disabled function: $@" >> $(LOG)
	@echo "HAVE_$@:=" >> $(OUTMAKE)

# Probe for header.
$(CHECK_HEADERS): init
	@FLAGS="$($(@:%_H=%_CFLAGS))" ; $(PYTHON) build/probe_run_header.py \
		"$(COMPILE)" "$(COMPILE_FLAGS) $$FLAGS" $(OUTDIR) $(LOG) $(OUTMAKE) \
		$(@:%_H=%) '$($(@:%_H=%)_PREHEADER) $($(@:%_H=%)_HEADER)'

$(DISABLED_HEADERS): init
	@echo "Disabled header: $(@:%_H=%)" >> $(LOG)
	@echo "HAVE_$@:=" >> $(OUTMAKE)

# Probe for library.
$(CHECK_LIBS): init
	@FLAGS="$($@_LDFLAGS)" ; $(PYTHON) build/probe_run_library.py \
		"$(COMPILE)" "$(COMPILE_FLAGS)" "$(LINK_FLAGS) $$FLAGS" \
		$(OUTDIR) $(LOG) $(OUTMAKE) $@

$(DISABLED_LIBS): init
	@echo "Disabled library: $@" >> $(LOG)
	@echo "HAVE_$@_LIB:=" >> $(OUTMAKE)

# Print the flags for using a certain library (CFLAGS and LDFLAGS).
$(PRINT_LIBS): check-targets
	@echo "$(@:%-print=%)_CFLAGS:=$($(@:%-print=%)_CFLAGS)" >> $(OUTMAKE)
	@echo "$(@:%-print=%)_LDFLAGS:=$($(@:%-print=%)_LDFLAGS)" >> $(OUTMAKE)

