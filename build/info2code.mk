# $Id$
#
# Write build info to C++ constants, so source can access it.
# Advantages of this approach:
# - file dates used for dependency checks (as opposed to "-D" compile flag)
# - inactive code is still checked by compiler (as opposed to "#if")

BIG_ENDIAN_CPUS:=ppc
BIG_ENDIAN:=$(if $(filter $(OPENMSX_TARGET_CPU),$(BIG_ENDIAN_CPUS)),true,false)

$(CONFIG_HEADER): $(CONFIG_MAKEFILE) $(OLD_CONFIG_HEADER) $(MAKE_PATH)/info2code.mk
	@echo "Creating $@..."
	@mkdir -p $(@D)
	@echo "// Automatically generated by build process." > $@
	@echo "" >> $@
	@echo "#ifndef __CONFIG_H__" >> $@
	@echo "#define __CONFIG_H__" >> $@
	@echo "// Backwards compatibility: include header generated by autoconf." >> $@
	@echo "#include \"oldconfig.h\"" >> $@
	@echo "" >> $@
	@echo "#include <string>" >> $@
	@echo "" >> $@
	@echo "namespace openmsx {" >> $@
	@echo "" >> $@
# Don't call it "BIG_ENDIAN", because some system header may #define that.
	@echo "static const bool OPENMSX_BIGENDIAN = $(BIG_ENDIAN);" >> $@
	@echo "static const std::string DATADIR = \"$(OPENMSX_INSTALL)/share\";" >> $@
	@echo "" >> $@
	@echo "} // namespace openmsx" >> $@
	@echo "" >> $@
	@echo "#endif //__CONFIG_H__" >> $@

$(VERSION_HEADER): ChangeLog $(MAKE_PATH)/info2code.mk
	@echo "Creating $@..."
	@mkdir -p $(@D)
	@echo "// Automatically generated by build process." > $@
	@echo "" >> $@
	@echo "const bool Version::RELEASE = $(RELEASE_FLAG);" >> $@
	@echo "const std::string Version::VERSION = \"$(PACKAGE_VERSION)\";" >> $@
	@echo "const std::string Version::CHANGELOG_REVISION = \"$(CHANGELOG_REVISION)\";" >> $@

