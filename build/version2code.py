# $Id$

import re, sys

def filterFile(filePath, regex):
	'''Filters each line of the given text file using the given regular
	expression string. For each match, a tuple containing the text matching
	each capture group from the regular expression is yielded.
	'''
	matcher = re.compile(regex)
	inp = open(filePath, 'r')
	try:
		for line in inp:
			if line.endswith('\n'):
				line = line[ : -1]
			match = matcher.match(line)
			if match:
				yield match.groups()
	finally:
		inp.close()

def extractMakeVariables(filePath):
	makeVars = {}
	for name, value in filterFile(
		filePath, r'[ ]*([A-Za-z0-9_]+)[ ]*:=[ ]*([^ ]*)[ ]*'
		):
		makeVars[name] = value
	return makeVars

def parseBool(valueStr):
	if valueStr == 'true':
		return True
	elif valueStr == 'false':
		return False
	else:
		raise ValueError('Invalid boolean "%s"' % valueStr)

def extractVersion():
	makeVars = extractMakeVariables('build/version.mk')
	return makeVars['PACKAGE_VERSION'], parseBool(makeVars['RELEASE_FLAG'])

def extractChangeLogRevision():
	for revision, in filterFile('ChangeLog', r'\$Id: ChangeLog (\d+).*\$'):
		return revision
	else:
		raise ValueError('No "Id" keyword found in ChangeLog')

def iterVersionInclude():
	packageVersion, releaseFlag = extractVersion()
	changeLogRevision = extractChangeLogRevision()

	yield '// Automatically generated by build process.'
	yield ''
	yield 'const bool Version::RELEASE = %s;' % str(releaseFlag).lower()
	yield 'const std::string Version::VERSION = "%s";' % packageVersion
	yield 'const std::string Version::CHANGELOG_REVISION = "%s";' \
		% changeLogRevision

for line in iterVersionInclude():
	print line
