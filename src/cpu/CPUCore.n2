// $Id$

#include <iomanip>

#ifdef CPU_DEBUG
#include "Z80Dasm.h"
#endif


void _CPU_::resetCore() {
	stop = false;
}


inline bool _CPU_::READ_PORT(word port, byte &result, ResumeFunc f)
{
	if ((currentTime + IO_DELAY1) < targetTime) {
		currentTime += IO_DELAY1;
		assert (currentTime < targetTime);
		//PRT_DEBUG("CPU: In 0x" << std::hex << (int)port <<
		//          std::dec << " at " << currentTime);
		result = interface->readIO(port, currentTime);
		currentTime += IO_DELAY2;
		return true;
	} else {
		resume = f;
		stop = true;
		return false;
	}
}

inline bool _CPU_::WRITE_PORT(word port, byte value, ResumeFunc f)
{
	if ((currentTime + IO_DELAY1) < targetTime) {
		currentTime += IO_DELAY1;
		assert (currentTime < targetTime);
		//PRT_DEBUG("CPU: Out 0x" << std::hex << (int)port <<
		//          std::dec << " at " << currentTime);
		interface->writeIO(port, value, currentTime);
		currentTime += IO_DELAY2;
		return true;
	} else {
		resume = f;
		stop = true;
		return false;
	}
}

inline bool _CPU_::RDMEM(word address, byte &result, ResumeFunc f)
{
	int line = address >> CACHE_LINE_BITS;
	if (readCacheLine[line] != NULL) {
		// cached, fast path
		currentTime += (MEM_DELAY1 + MEM_DELAY2);
		result = readCacheLine[line][address&CACHE_LINE_LOW];
		#ifdef CPU_DEBUG
		debugmemory[address] = result;
		#endif
		return true;
	}
	RDMEMslow(address, result, f);
}
bool _CPU_::RDMEMslow(word address, byte &result, ResumeFunc f)
{
	// not cached
	int line = address >> CACHE_LINE_BITS;
	if (!readCacheTried[line]) {
		// try to cache now
		readCacheTried[line] = true;
		readCacheLine[line] = interface->getReadCacheLine(address&CACHE_LINE_HIGH);
		if (readCacheLine[line] != NULL) {
			// cached ok
			currentTime += (MEM_DELAY1 + MEM_DELAY2);
			result = readCacheLine[line][address&CACHE_LINE_LOW];
			#ifdef CPU_DEBUG
			debugmemory[address] = result;
			#endif
			return true;
		}
	}
	// uncacheable
	if ((currentTime + MEM_DELAY1) < targetTime) {
		currentTime += MEM_DELAY1;
		assert (currentTime < targetTime);
		result = interface->readMem(address, currentTime);
		#ifdef CPU_DEBUG
		debugmemory[address] = result;
		#endif
		currentTime += MEM_DELAY2;
		return true;
	} else {
		resume = f;
		stop = true;
		return false;
	}
}

inline bool _CPU_::WRMEM(word address, byte value, ResumeFunc f)
{
	int line = address >> CACHE_LINE_BITS;
	if (writeCacheLine[line] != NULL) {
		// cached, fast path
		currentTime += (MEM_DELAY1 + MEM_DELAY2);
		writeCacheLine[line][address&CACHE_LINE_LOW] = value;
		return true;
	}
	WRMEMslow(address, value, f);
}
bool _CPU_::WRMEMslow(word address, byte value, ResumeFunc f)
{
	// not cached
	int line = address >> CACHE_LINE_BITS;
	if (!writeCacheTried[line]) {
		// try to cache now
		writeCacheTried[line] = true;
		writeCacheLine[line] = interface->getWriteCacheLine(address&CACHE_LINE_HIGH);
		if (writeCacheLine[line] != NULL) {
			// cached ok
			currentTime += (MEM_DELAY1 + MEM_DELAY2);
			writeCacheLine[line][address&CACHE_LINE_LOW] = value;
			return true;
		}
	}
	// uncacheable
	if ((currentTime + MEM_DELAY1) < targetTime) {
		currentTime += MEM_DELAY1;
		assert (currentTime < targetTime);
		interface->writeMem(address, value, currentTime);
		currentTime += MEM_DELAY2;
		return true;
	} else {
		resume = f;
		stop = true;
		return false;
	}
}


inline void _CPU_::M1Cycle() { R.R++; M1_DELAY(); }

// NMI interrupt
inline void _CPU_::nmi2() {
	if (WRMEM(R.SP.w, R.PC.B.l, &_CPU_::nmi2)) {
		R.HALT = false;
		R.IFF1 = R.nextIFF1 = false;
		R.PC.w = 0x0066;
		M1Cycle();
		NMI_DELAY();
	}
}
inline void _CPU_::nmi1() {
	if (WRMEM(R.SP.w, R.PC.B.h, &_CPU_::nmi1)) {
		R.SP.w--; nmi2();
	}
}
inline void _CPU_::nmi() {
	SMALL_DELAY(); R.SP.w--; nmi1();
}

// IM0 interrupt
inline void _CPU_::irq0() {
	// TODO current implementation only works for 1-byte instructions
	//      ok for MSX
	R.HALT = false;
	R.IFF1 = R.nextIFF1 = R.IFF2 = false;
	IM0_DELAY();
	executeInstruction1(interface->dataBus());
}

// IM1 interrupt
inline void _CPU_::irq1() {
	R.HALT = false;
	R.IFF1 = R.nextIFF1 = R.IFF2 = false;
	IM1_DELAY();
	executeInstruction1(0xFF);	// RST 38h
}

// IM2 interrupt
inline void _CPU_::irq2_4() {
	if (RDMEM(x.w, R.PC.B.h, &_CPU_::irq2_4)) {
		M1Cycle();
		IM2_DELAY();
		
	}
}
inline void _CPU_::irq2_3() {
	if (RDMEM(x.w, R.PC.B.l, &_CPU_::irq2_3)) {
		x.w++; irq2_4();
	}
}
inline void _CPU_::irq2_2() {
	if (WRMEM(R.SP.w, R.PC.B.l, &_CPU_::irq2_2)) {
		x.w = interface->dataBus() | (R.I << 8); irq2_3();
	}
}
inline void _CPU_::irq2_1() {
	if (WRMEM(R.SP.w, R.PC.B.h, &_CPU_::irq2_1)) {
		R.SP.w--; irq2_2();
	}
}
inline void _CPU_::irq2() {
	R.HALT = false;
	R.IFF1 = R.nextIFF1 = R.IFF2 = false;
	SMALL_DELAY(); R.SP.w--; irq2_1();
}

inline void _CPU_::executeInstruction1(byte opcode) {
	M1Cycle();
	(this->*opcode_main[opcode])();
}

inline void _CPU_::executeInstruction() {
	byte opcode;
	if (RDMEM(R.PC.w, opcode, &_CPU_::executeInstruction)) {
		R.PC.w++; executeInstruction1(opcode);
	}
}

inline void _CPU_::executeFast() {
	#ifdef CPU_DEBUG
	start_pc = R.PC.w;
	before = currentTime;
	#endif

	executeInstruction();
	
	#ifdef CPU_DEBUG
	if (cpudebug) {
		Dasm(&debugmemory[start_pc], to_print_string, start_pc);
		PRT_DEBUG(std::setfill('0') << std::hex <<
			  std::setw(4) << start_pc <<
			  " : " << to_print_string <<
			  " AF=" << std::setw(4) << R.AF.w <<
			  " BC=" << std::setw(4) << R.BC.w <<
			  " DE=" << std::setw(4) << R.DE.w <<
			  " HL=" << std::setw(4) << R.HL.w <<
			  " IX=" << std::setw(4) << R.IX.w <<
			  " IY=" << std::setw(4) << R.IY.w <<
			  " SP=" << std::setw(4) << R.SP.w << std::dec);
		//PRT_DEBUG("CPU: Took " << before.getTicksTill(currentTime) << "T-States");
	}
	#endif
}

inline void _CPU_::executeSlow() {
	if (interface->NMIEdge()) {
		nmi();	// NMI occured
	} else if (R.IFF1 && IRQStatus) {
		// normal interrupt
		PRT_DEBUG("CPU: acknowledge IRQ");
		switch (R.IM) {
			case 0: irq0();
				break;
			case 1: irq1();
				break;
			case 2: irq2();
				break;
			default:
				assert(false);
		}
	} else if (R.HALT) {
		// in halt mode
		uint64 ticks = currentTime.getTicksTillUp(targetTime);
		int hltStates = haltStates();
		int halts = (ticks + hltStates - 1) / hltStates;	// rounded up
		R.R += halts;
		currentTime += halts * hltStates;
	} else {
		R.IFF1 = R.nextIFF1;
		executeFast();
	}
}

void _CPU_::executeCore() {
	slowInstructions = 2;
	if (stop) {
		stop = false;
		(this->*resume)();
	}
	while (!stop && (currentTime < targetTime)) {
		if (slowInstructions == 0) {
			executeFast();
		} else {
			slowInstructions--;
			executeSlow();
		}
	}
	//PRT_DEBUG("CPU: stopped at " << currentTime << " " << stop);
}


// big/little endian pointers
#ifdef WORDS_BIGENDIAN
inline void _CPU_::pLowToHigh() { p--; }
inline void _CPU_::pHighToLow() { p++; }
#else
inline void _CPU_::pLowToHigh() { p++; }
inline void _CPU_::pHighToLow() { p--; }
#endif

// conditions
inline bool _CPU_::C()  { return R.AF.B.l & C_FLAG; }
inline bool _CPU_::NC() { return !C(); }
inline bool _CPU_::Z()  { return R.AF.B.l & Z_FLAG; }
inline bool _CPU_::NZ() { return !Z(); }
inline bool _CPU_::M()  { return R.AF.B.l & S_FLAG; }
inline bool _CPU_::P()  { return !M(); }
inline bool _CPU_::PE() { return R.AF.B.l & V_FLAG; }
inline bool _CPU_::PO() { return !PE(); }


// LD r,r
void _CPU_::ld_a_a()     { }
void _CPU_::ld_a_b()     { R.AF.B.h = R.BC.B.h; }
void _CPU_::ld_a_c()     { R.AF.B.h = R.BC.B.l; }
void _CPU_::ld_a_d()     { R.AF.B.h = R.DE.B.h; }
void _CPU_::ld_a_e()     { R.AF.B.h = R.DE.B.l; }
void _CPU_::ld_a_h()     { R.AF.B.h = R.HL.B.h; }
void _CPU_::ld_a_l()     { R.AF.B.h = R.HL.B.l; }
void _CPU_::ld_a_ixh()   { R.AF.B.h = R.IX.B.h; }
void _CPU_::ld_a_ixl()   { R.AF.B.h = R.IX.B.l; }
void _CPU_::ld_a_iyh()   { R.AF.B.h = R.IY.B.h; }
void _CPU_::ld_a_iyl()   { R.AF.B.h = R.IY.B.l; }
void _CPU_::ld_b_b()     { }
void _CPU_::ld_b_a()     { R.BC.B.h = R.AF.B.h; }
void _CPU_::ld_b_c()     { R.BC.B.h = R.BC.B.l; }
void _CPU_::ld_b_d()     { R.BC.B.h = R.DE.B.h; }
void _CPU_::ld_b_e()     { R.BC.B.h = R.DE.B.l; }
void _CPU_::ld_b_h()     { R.BC.B.h = R.HL.B.h; }
void _CPU_::ld_b_l()     { R.BC.B.h = R.HL.B.l; }
void _CPU_::ld_b_ixh()   { R.BC.B.h = R.IX.B.h; }
void _CPU_::ld_b_ixl()   { R.BC.B.h = R.IX.B.l; }
void _CPU_::ld_b_iyh()   { R.BC.B.h = R.IY.B.h; }
void _CPU_::ld_b_iyl()   { R.BC.B.h = R.IY.B.l; }
void _CPU_::ld_c_c()     { }
void _CPU_::ld_c_a()     { R.BC.B.l = R.AF.B.h; }
void _CPU_::ld_c_b()     { R.BC.B.l = R.BC.B.h; }
void _CPU_::ld_c_d()     { R.BC.B.l = R.DE.B.h; }
void _CPU_::ld_c_e()     { R.BC.B.l = R.DE.B.l; }
void _CPU_::ld_c_h()     { R.BC.B.l = R.HL.B.h; }
void _CPU_::ld_c_l()     { R.BC.B.l = R.HL.B.l; }
void _CPU_::ld_c_ixh()   { R.BC.B.l = R.IX.B.h; }
void _CPU_::ld_c_ixl()   { R.BC.B.l = R.IX.B.l; }
void _CPU_::ld_c_iyh()   { R.BC.B.l = R.IY.B.h; }
void _CPU_::ld_c_iyl()   { R.BC.B.l = R.IY.B.l; }
void _CPU_::ld_d_d()     { }
void _CPU_::ld_d_a()     { R.DE.B.h = R.AF.B.h; }
void _CPU_::ld_d_c()     { R.DE.B.h = R.BC.B.l; }
void _CPU_::ld_d_b()     { R.DE.B.h = R.BC.B.h; }
void _CPU_::ld_d_e()     { R.DE.B.h = R.DE.B.l; }
void _CPU_::ld_d_h()     { R.DE.B.h = R.HL.B.h; }
void _CPU_::ld_d_l()     { R.DE.B.h = R.HL.B.l; }
void _CPU_::ld_d_ixh()   { R.DE.B.h = R.IX.B.h; }
void _CPU_::ld_d_ixl()   { R.DE.B.h = R.IX.B.l; }
void _CPU_::ld_d_iyh()   { R.DE.B.h = R.IY.B.h; }
void _CPU_::ld_d_iyl()   { R.DE.B.h = R.IY.B.l; }
void _CPU_::ld_e_e()     { }
void _CPU_::ld_e_a()     { R.DE.B.l = R.AF.B.h; }
void _CPU_::ld_e_c()     { R.DE.B.l = R.BC.B.l; }
void _CPU_::ld_e_b()     { R.DE.B.l = R.BC.B.h; }
void _CPU_::ld_e_d()     { R.DE.B.l = R.DE.B.h; }
void _CPU_::ld_e_h()     { R.DE.B.l = R.HL.B.h; }
void _CPU_::ld_e_l()     { R.DE.B.l = R.HL.B.l; }
void _CPU_::ld_e_ixh()   { R.DE.B.l = R.IX.B.h; }
void _CPU_::ld_e_ixl()   { R.DE.B.l = R.IX.B.l; }
void _CPU_::ld_e_iyh()   { R.DE.B.l = R.IY.B.h; }
void _CPU_::ld_e_iyl()   { R.DE.B.l = R.IY.B.l; }
void _CPU_::ld_h_h()     { }
void _CPU_::ld_h_a()     { R.HL.B.h = R.AF.B.h; }
void _CPU_::ld_h_c()     { R.HL.B.h = R.BC.B.l; }
void _CPU_::ld_h_b()     { R.HL.B.h = R.BC.B.h; }
void _CPU_::ld_h_e()     { R.HL.B.h = R.DE.B.l; }
void _CPU_::ld_h_d()     { R.HL.B.h = R.DE.B.h; }
void _CPU_::ld_h_l()     { R.HL.B.h = R.HL.B.l; }
void _CPU_::ld_l_l()     { }
void _CPU_::ld_l_a()     { R.HL.B.l = R.AF.B.h; }
void _CPU_::ld_l_c()     { R.HL.B.l = R.BC.B.l; }
void _CPU_::ld_l_b()     { R.HL.B.l = R.BC.B.h; }
void _CPU_::ld_l_e()     { R.HL.B.l = R.DE.B.l; }
void _CPU_::ld_l_d()     { R.HL.B.l = R.DE.B.h; }
void _CPU_::ld_l_h()     { R.HL.B.l = R.HL.B.h; }
void _CPU_::ld_ixh_a()   { R.IX.B.h = R.AF.B.h; }
void _CPU_::ld_ixh_b()   { R.IX.B.h = R.BC.B.h; }
void _CPU_::ld_ixh_c()   { R.IX.B.h = R.BC.B.l; }
void _CPU_::ld_ixh_d()   { R.IX.B.h = R.DE.B.h; }
void _CPU_::ld_ixh_e()   { R.IX.B.h = R.DE.B.l; }
void _CPU_::ld_ixh_ixh() { }
void _CPU_::ld_ixh_ixl() { R.IX.B.h = R.IX.B.l; }
void _CPU_::ld_ixl_a()   { R.IX.B.l = R.AF.B.h; }
void _CPU_::ld_ixl_b()   { R.IX.B.l = R.BC.B.h; }
void _CPU_::ld_ixl_c()   { R.IX.B.l = R.BC.B.l; }
void _CPU_::ld_ixl_d()   { R.IX.B.l = R.DE.B.h; }
void _CPU_::ld_ixl_e()   { R.IX.B.l = R.DE.B.l; }
void _CPU_::ld_ixl_ixh() { R.IX.B.l = R.IX.B.h; }
void _CPU_::ld_ixl_ixl() { }
void _CPU_::ld_iyh_a()   { R.IY.B.h = R.AF.B.h; }
void _CPU_::ld_iyh_b()   { R.IY.B.h = R.BC.B.h; }
void _CPU_::ld_iyh_c()   { R.IY.B.h = R.BC.B.l; }
void _CPU_::ld_iyh_d()   { R.IY.B.h = R.DE.B.h; }
void _CPU_::ld_iyh_e()   { R.IY.B.h = R.DE.B.l; }
void _CPU_::ld_iyh_iyh() { }
void _CPU_::ld_iyh_iyl() { R.IY.B.h = R.IY.B.l; }
void _CPU_::ld_iyl_a()   { R.IY.B.l = R.AF.B.h; }
void _CPU_::ld_iyl_b()   { R.IY.B.l = R.BC.B.h; }
void _CPU_::ld_iyl_c()   { R.IY.B.l = R.BC.B.l; }
void _CPU_::ld_iyl_d()   { R.IY.B.l = R.DE.B.h; }
void _CPU_::ld_iyl_e()   { R.IY.B.l = R.DE.B.l; }
void _CPU_::ld_iyl_iyh() { R.IY.B.l = R.IY.B.h; }
void _CPU_::ld_iyl_iyl() { }

// LD SP,ss
void _CPU_::ld_sp_hl()   { R.SP.w = R.HL.w; }
void _CPU_::ld_sp_ix()   { R.SP.w = R.IX.w; }
void _CPU_::ld_sp_iy()   { R.SP.w = R.IY.w; }

// LD (ss),a
inline void _CPU_::WR_X_A() {
	if (WRMEM(x.w, R.AF.B.h, &_CPU_::WR_X_A)) {
	}
}
void _CPU_::ld_xbc_a() { x.w = R.BC.w; WR_X_A(); }
void _CPU_::ld_xde_a() { x.w = R.DE.w; WR_X_A(); }
void _CPU_::ld_xhl_a() { x.w = R.HL.w; WR_X_A(); }

// LD (HL),r
inline void _CPU_::WR_HL_X() {
	if (WRMEM(R.HL.w, dummy, &_CPU_::WR_HL_X)) {
	}
}
void _CPU_::ld_xhl_b() { dummy = R.BC.B.h; WR_HL_X(); }
void _CPU_::ld_xhl_c() { dummy = R.BC.B.l; WR_HL_X(); }
void _CPU_::ld_xhl_d() { dummy = R.DE.B.h; WR_HL_X(); }
void _CPU_::ld_xhl_e() { dummy = R.DE.B.l; WR_HL_X(); }
void _CPU_::ld_xhl_h() { dummy = R.HL.B.h; WR_HL_X(); }
void _CPU_::ld_xhl_l() { dummy = R.HL.B.l; WR_HL_X(); }

// LD (HL),n
void _CPU_::ld_xhl_byte(){ 
	if (RDMEM(R.PC.w, dummy, &_CPU_::ld_xhl_byte)) {
		R.PC.w++; WR_HL_X();
	}
}

// LD (IX+e),r
inline void _CPU_::WR_X_X() {
	if (WRMEM(x.w, dummy, &_CPU_::WR_X_X)) {
	}
}
inline void _CPU_::WR_XIX() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::WR_XIX)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); WR_X_X();
	}
}
void _CPU_::ld_xix_a() { dummy = R.AF.B.h; WR_XIX(); }
void _CPU_::ld_xix_b() { dummy = R.BC.B.h; WR_XIX(); }
void _CPU_::ld_xix_c() { dummy = R.BC.B.l; WR_XIX(); }
void _CPU_::ld_xix_d() { dummy = R.DE.B.h; WR_XIX(); }
void _CPU_::ld_xix_e() { dummy = R.DE.B.l; WR_XIX(); }
void _CPU_::ld_xix_h() { dummy = R.HL.B.h; WR_XIX(); }
void _CPU_::ld_xix_l() { dummy = R.HL.B.l; WR_XIX(); }

// LD (IY+e),r
inline void _CPU_::WR_XIY() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::WR_XIY)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); WR_X_X();
	}
}
void _CPU_::ld_xiy_a() { dummy = R.AF.B.h; WR_XIY(); }
void _CPU_::ld_xiy_b() { dummy = R.BC.B.h; WR_XIY(); }
void _CPU_::ld_xiy_c() { dummy = R.BC.B.l; WR_XIY(); }
void _CPU_::ld_xiy_d() { dummy = R.DE.B.h; WR_XIY(); }
void _CPU_::ld_xiy_e() { dummy = R.DE.B.l; WR_XIY(); }
void _CPU_::ld_xiy_h() { dummy = R.HL.B.h; WR_XIY(); }
void _CPU_::ld_xiy_l() { dummy = R.HL.B.l; WR_XIY(); }

// LD (IX+e),n
void _CPU_::ld_xix_byte1() {
	if (RDMEM(R.PC.w, dummy, &_CPU_::ld_xix_byte1)) {
		R.PC.w++; PARALLEL_DELAY(); WR_X_X();
	}
}
void _CPU_::ld_xix_byte() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::ld_xix_byte)) {
		R.PC.w++; x.w = R.IX.w + ofst; ld_xix_byte1();
	}
}

// LD (IY+e),n
void _CPU_::ld_xiy_byte1() {
	if (RDMEM(R.PC.w, dummy, &_CPU_::ld_xiy_byte1)) {
		R.PC.w++; PARALLEL_DELAY(); WR_X_X();
	}
}
void _CPU_::ld_xiy_byte() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::ld_xiy_byte)) {
		R.PC.w++; x.w = R.IY.w + ofst; ld_xiy_byte1();
	}
}

// LD (nn),A
void _CPU_::ld_xbyte_a1() {
	if (RDMEM(R.PC.w, x.B.h, &_CPU_::ld_xbyte_a1)) {
		R.PC.w++; WR_X_A();
	}
}
void _CPU_::ld_xbyte_a() {
	if (RDMEM(R.PC.w, x.B.l, &_CPU_::ld_xbyte_a)) {
		R.PC.w++; ld_xbyte_a1();
	}
}

// LD (ss),nn
inline void _CPU_::WR_X_Y1() {
	if (WRMEM(x.w, y.B.h, &_CPU_::WR_X_Y1)) {
	}
}
inline void _CPU_::WR_X_Y() {
	if (WRMEM(x.w, y.B.l, &_CPU_::WR_X_Y)) {
		x.w++; WR_X_Y1();
	}
}
inline void _CPU_::WR_NN_Y1() {
	if (RDMEM(R.PC.w, x.B.h, &_CPU_::WR_NN_Y1)) {
		R.PC.w++; WR_X_Y();
	}
}
inline void _CPU_::WR_NN_Y() {
	if (RDMEM(R.PC.w, x.B.l, &_CPU_::WR_NN_Y)) {
		R.PC.w++; WR_NN_Y1();
	}
}
void _CPU_::ld_xword_bc() { y.w = R.BC.w; WR_NN_Y(); }
void _CPU_::ld_xword_de() { y.w = R.DE.w; WR_NN_Y(); }
void _CPU_::ld_xword_hl() { y.w = R.HL.w; WR_NN_Y(); }
void _CPU_::ld_xword_ix() { y.w = R.IX.w; WR_NN_Y(); }
void _CPU_::ld_xword_iy() { y.w = R.IY.w; WR_NN_Y(); }
void _CPU_::ld_xword_sp() { y.w = R.SP.w; WR_NN_Y(); }

// LD A,(ss)
inline void _CPU_::RD_A_X() {
	if (RDMEM(x.w, R.AF.B.h, &_CPU_::RD_A_X)) { }
}
void _CPU_::ld_a_xbc() { x.w = R.BC.w; RD_A_X(); }
void _CPU_::ld_a_xde() { x.w = R.DE.w; RD_A_X(); }
void _CPU_::ld_a_xhl() { x.w = R.HL.w; RD_A_X(); }

// LD A,(IX+e)
void _CPU_::ld_a_xix() {   
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::ld_a_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; RD_A_X();
	}
}

// LD A,(IY+e)
void _CPU_::ld_a_xiy() {   
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::ld_a_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; RD_A_X();
	}
}

// LD A,(nn)
void _CPU_::ld_a_xbyte1() {
	if (RDMEM(R.PC.w, x.B.h, &_CPU_::ld_a_xbyte1)) {
		R.PC.w++; RD_A_X();
	}
}
void _CPU_::ld_a_xbyte() {
	if (RDMEM(R.PC.w, x.B.l, &_CPU_::ld_a_xbyte)) {
		R.PC.w++; ld_a_xbyte1();
	}
}

// LD r,n
inline void _CPU_::RD_R_N() {
	if (RDMEM(R.PC.w, *p, &_CPU_::RD_R_N)) {
		R.PC.w++; 
	}
}
void _CPU_::ld_a_byte()  { p = &R.AF.B.h; RD_R_N(); }
void _CPU_::ld_b_byte()  { p = &R.BC.B.h; RD_R_N(); }
void _CPU_::ld_c_byte()  { p = &R.BC.B.l; RD_R_N(); }
void _CPU_::ld_d_byte()  { p = &R.DE.B.h; RD_R_N(); }
void _CPU_::ld_e_byte()  { p = &R.DE.B.l; RD_R_N(); }
void _CPU_::ld_h_byte()  { p = &R.HL.B.h; RD_R_N(); }
void _CPU_::ld_l_byte()  { p = &R.HL.B.l; RD_R_N(); }
void _CPU_::ld_ixh_byte(){ p = &R.IX.B.h; RD_R_N(); }
void _CPU_::ld_ixl_byte(){ p = &R.IX.B.l; RD_R_N(); }
void _CPU_::ld_iyh_byte(){ p = &R.IY.B.h; RD_R_N(); }
void _CPU_::ld_iyl_byte(){ p = &R.IY.B.l; RD_R_N(); }

// LD r,(hl)
inline void _CPU_::RD_R_HL() {
	if (RDMEM(R.HL.w, *p, &_CPU_::RD_R_HL)) {
	}
}
void _CPU_::ld_b_xhl()   { p = &R.BC.B.h; RD_R_HL(); }
void _CPU_::ld_c_xhl()   { p = &R.BC.B.l; RD_R_HL(); }
void _CPU_::ld_d_xhl()   { p = &R.DE.B.h; RD_R_HL(); }
void _CPU_::ld_e_xhl()   { p = &R.DE.B.l; RD_R_HL(); }
void _CPU_::ld_h_xhl()   { p = &R.HL.B.h; RD_R_HL(); }
void _CPU_::ld_l_xhl()   { p = &R.HL.B.l; RD_R_HL(); }

// LD r,(IX+e)
inline void _CPU_::RD_R_X() {
	if (RDMEM(x.w, *p, &_CPU_::RD_R_X)) {
	}
}
inline void _CPU_::RD_R_XIX() {   
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::RD_R_XIX)) {
		R.PC.w++; x.w = R.IX.w + ofst; RD_R_X();
	}
}
void _CPU_::ld_b_xix()   { p = &R.BC.B.h; RD_R_XIX(); }
void _CPU_::ld_c_xix()   { p = &R.BC.B.l; RD_R_XIX(); }
void _CPU_::ld_d_xix()   { p = &R.DE.B.h; RD_R_XIX(); }
void _CPU_::ld_e_xix()   { p = &R.DE.B.l; RD_R_XIX(); }
void _CPU_::ld_h_xix()   { p = &R.HL.B.h; RD_R_XIX(); }
void _CPU_::ld_l_xix()   { p = &R.HL.B.l; RD_R_XIX(); }

// LD r,(IY+e)
inline void _CPU_::RD_R_XIY() {   
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::RD_R_XIY)) {
		R.PC.w++; x.w = R.IY.w + ofst; RD_R_X();
	}
}
void _CPU_::ld_b_xiy()   { p = &R.BC.B.h; RD_R_XIY(); }
void _CPU_::ld_c_xiy()   { p = &R.BC.B.l; RD_R_XIY(); }
void _CPU_::ld_d_xiy()   { p = &R.DE.B.h; RD_R_XIY(); }
void _CPU_::ld_e_xiy()   { p = &R.DE.B.l; RD_R_XIY(); }
void _CPU_::ld_h_xiy()   { p = &R.HL.B.h; RD_R_XIY(); }
void _CPU_::ld_l_xiy()   { p = &R.HL.B.l; RD_R_XIY(); }

// LD ss,(nn)
inline void _CPU_::RD_P_XX3() {
	if (RDMEM(x.w, *p, &_CPU_::RD_P_XX3)) {
	}
}
inline void _CPU_::RD_P_XX2() {
	if (RDMEM(x.w, *p, &_CPU_::RD_P_XX2)) {
		x.w++; pLowToHigh(); RD_P_XX3();
	}
}
inline void _CPU_::RD_P_XX1() {
	if (RDMEM(R.PC.w, x.B.h, &_CPU_::RD_P_XX1)) {
		R.PC.w++; RD_P_XX2();
	}
}
inline void _CPU_::RD_P_XX() {
	if (RDMEM(R.PC.w, x.B.l, &_CPU_::RD_P_XX)) {
		R.PC.w++; RD_P_XX1();
	}
}
void _CPU_::ld_bc_xword(){ p = &R.BC.B.l; RD_P_XX(); }
void _CPU_::ld_de_xword(){ p = &R.DE.B.l; RD_P_XX(); }
void _CPU_::ld_hl_xword(){ p = &R.HL.B.l; RD_P_XX(); }
void _CPU_::ld_ix_xword(){ p = &R.IX.B.l; RD_P_XX(); }
void _CPU_::ld_iy_xword(){ p = &R.IY.B.l; RD_P_XX(); }
void _CPU_::ld_sp_xword(){ p = &R.SP.B.l; RD_P_XX(); }

// LD ss,nn
inline void _CPU_::RD_P_NN1() {
	if (RDMEM(R.PC.w, *p, &_CPU_::RD_P_NN1)) {
		R.PC.w++; 
	}
}
inline void _CPU_::RD_P_NN() {
	if (RDMEM(R.PC.w, *p, &_CPU_::RD_P_NN)) {
		R.PC.w++; pLowToHigh(); RD_P_NN1();
	}
}
void _CPU_::ld_bc_word() { p = &R.BC.B.l; RD_P_NN(); }
void _CPU_::ld_de_word() { p = &R.DE.B.l; RD_P_NN(); }
void _CPU_::ld_hl_word() { p = &R.HL.B.l; RD_P_NN(); }
void _CPU_::ld_ix_word() { p = &R.IX.B.l; RD_P_NN(); }
void _CPU_::ld_iy_word() { p = &R.IY.B.l; RD_P_NN(); }
void _CPU_::ld_sp_word() { p = &R.SP.B.l; RD_P_NN(); }


// ADC A,r
inline void _CPU_::ADC(byte reg) {
	int res = R.AF.B.h + reg + ((R.AF.B.l & C_FLAG) ? 1 : 0);
	R.AF.B.l = ZSXYTable[res & 0xFF] |
	           ((res & 0x100) ? C_FLAG : 0) |
	           ((R.AF.B.h ^ res ^ reg) & H_FLAG) |
	           (((reg ^ R.AF.B.h ^ 0x80) & (reg ^ res) & 0x80) ? V_FLAG : 0);
	R.AF.B.h = res;
}
void _CPU_::adc_a_a()   { ADC(R.AF.B.h); }
void _CPU_::adc_a_b()   { ADC(R.BC.B.h); }
void _CPU_::adc_a_c()   { ADC(R.BC.B.l); }
void _CPU_::adc_a_d()   { ADC(R.DE.B.h); }
void _CPU_::adc_a_e()   { ADC(R.DE.B.l); }
void _CPU_::adc_a_h()   { ADC(R.HL.B.h); }
void _CPU_::adc_a_l()   { ADC(R.HL.B.l); }
void _CPU_::adc_a_ixl() { ADC(R.IX.B.l); }
void _CPU_::adc_a_ixh() { ADC(R.IX.B.h); }
void _CPU_::adc_a_iyl() { ADC(R.IY.B.l); }
void _CPU_::adc_a_iyh() { ADC(R.IY.B.h); }
void _CPU_::adc_a_byte(){
	byte n;
	if (RDMEM(R.PC.w, n, &_CPU_::adc_a_byte)) {
		R.PC.w++; ADC(n);
	}
}
inline void _CPU_::adc_a_x() {
	byte n;
	if (RDMEM(x.w, n, &_CPU_::adc_a_x)) {
		ADC(n);
	}
}
void _CPU_::adc_a_xhl() { x.w = R.HL.w; adc_a_x(); }
void _CPU_::adc_a_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::adc_a_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); adc_a_x();
	}
}
void _CPU_::adc_a_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::adc_a_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); adc_a_x();
	}
}

// ADD A,r
inline void _CPU_::ADD(byte reg) {
	int res = R.AF.B.h + reg;
	R.AF.B.l = ZSXYTable[res & 0xFF] |
	           ((res & 0x100) ? C_FLAG : 0) |
	           ((R.AF.B.h ^ res ^ reg) & H_FLAG) |
	           (((reg ^ R.AF.B.h ^ 0x80) & (reg ^ res) & 0x80) ? V_FLAG : 0);
	R.AF.B.h = res;
}
void _CPU_::add_a_a()   { ADD(R.AF.B.h); }
void _CPU_::add_a_b()   { ADD(R.BC.B.h); }
void _CPU_::add_a_c()   { ADD(R.BC.B.l); }
void _CPU_::add_a_d()   { ADD(R.DE.B.h); }
void _CPU_::add_a_e()   { ADD(R.DE.B.l); }
void _CPU_::add_a_h()   { ADD(R.HL.B.h); }
void _CPU_::add_a_l()   { ADD(R.HL.B.l); }
void _CPU_::add_a_ixl() { ADD(R.IX.B.l); }
void _CPU_::add_a_ixh() { ADD(R.IX.B.h); }
void _CPU_::add_a_iyl() { ADD(R.IY.B.l); }
void _CPU_::add_a_iyh() { ADD(R.IY.B.h); }
void _CPU_::add_a_byte(){
	byte n;
	if (RDMEM(R.PC.w, n, &_CPU_::add_a_byte)) {
		R.PC.w++; ADD(n);
	}
}
inline void _CPU_::add_a_x() {
	byte n;
	if (RDMEM(x.w, n, &_CPU_::add_a_x)) {
		ADD(n);
	}
}
void _CPU_::add_a_xhl() { x.w = R.HL.w; add_a_x(); }
void _CPU_::add_a_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::add_a_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); add_a_x();
	}
}
void _CPU_::add_a_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::add_a_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); add_a_x();
	}
}

// AND r
inline void _CPU_::AND(byte reg) {
	R.AF.B.h &= reg;
	R.AF.B.l = ZSPXYTable[R.AF.B.h] | H_FLAG;
}
void _CPU_::and_a()   { AND(R.AF.B.h); }
void _CPU_::and_b()   { AND(R.BC.B.h); }
void _CPU_::and_c()   { AND(R.BC.B.l); }
void _CPU_::and_d()   { AND(R.DE.B.h); }
void _CPU_::and_e()   { AND(R.DE.B.l); }
void _CPU_::and_h()   { AND(R.HL.B.h); }
void _CPU_::and_l()   { AND(R.HL.B.l); }
void _CPU_::and_ixh() { AND(R.IX.B.h); }
void _CPU_::and_ixl() { AND(R.IX.B.l); }
void _CPU_::and_iyh() { AND(R.IY.B.h); }
void _CPU_::and_iyl() { AND(R.IY.B.l); }
void _CPU_::and_byte(){
	byte n;
	if (RDMEM(R.PC.w, n, &_CPU_::and_byte)) {
		R.PC.w++; AND(n);
	}
}
inline void _CPU_::and_x() {
	byte n;
	if (RDMEM(x.w, n, &_CPU_::and_x)) {
		AND(n);
	}
}
void _CPU_::and_xhl() { x.w = R.HL.w; and_x(); }
void _CPU_::and_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::and_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); and_x();
	}
}
void _CPU_::and_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::and_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); and_x();
	}
}

// CP r
inline void _CPU_::CP(byte reg) {
	int q = R.AF.B.h - reg;
	R.AF.B.l = ZSTable[q & 0xFF] |
	           (reg & (X_FLAG | Y_FLAG)) |	// XY from operand, not from result
	           ((q & 0x100) ? C_FLAG : 0) |
	           N_FLAG |
	           ((R.AF.B.h ^ q ^ reg) & H_FLAG) |
	           (((reg ^ R.AF.B.h) & (R.AF.B.h ^ q) & 0x80) ? V_FLAG : 0);
}
void _CPU_::cp_a()   { CP(R.AF.B.h); }
void _CPU_::cp_b()   { CP(R.BC.B.h); }
void _CPU_::cp_c()   { CP(R.BC.B.l); }
void _CPU_::cp_d()   { CP(R.DE.B.h); }
void _CPU_::cp_e()   { CP(R.DE.B.l); }
void _CPU_::cp_h()   { CP(R.HL.B.h); }
void _CPU_::cp_l()   { CP(R.HL.B.l); }
void _CPU_::cp_ixh() { CP(R.IX.B.h); }
void _CPU_::cp_ixl() { CP(R.IX.B.l); }
void _CPU_::cp_iyh() { CP(R.IY.B.h); }
void _CPU_::cp_iyl() { CP(R.IY.B.l); }
void _CPU_::cp_byte(){
	byte n;
	if (RDMEM(R.PC.w, n, &_CPU_::cp_byte)) {
		R.PC.w++; CP(n);
	}
}
inline void _CPU_::cp_x() {
	byte n;
	if (RDMEM(x.w, n, &_CPU_::cp_x)) {
		CP(n);
	}
}
void _CPU_::cp_xhl() { x.w = R.HL.w; cp_x(); }
void _CPU_::cp_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::cp_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); cp_x();
	}
}
void _CPU_::cp_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::cp_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); cp_x();
	}
}

// OR r
inline void _CPU_::OR(byte reg) {
	R.AF.B.h |= reg;
	R.AF.B.l = ZSPXYTable[R.AF.B.h];
}
void _CPU_::or_a()   { OR(R.AF.B.h); }
void _CPU_::or_b()   { OR(R.BC.B.h); }
void _CPU_::or_c()   { OR(R.BC.B.l); }
void _CPU_::or_d()   { OR(R.DE.B.h); }
void _CPU_::or_e()   { OR(R.DE.B.l); }
void _CPU_::or_h()   { OR(R.HL.B.h); }
void _CPU_::or_l()   { OR(R.HL.B.l); }
void _CPU_::or_ixh() { OR(R.IX.B.h); }
void _CPU_::or_ixl() { OR(R.IX.B.l); }
void _CPU_::or_iyh() { OR(R.IY.B.h); }
void _CPU_::or_iyl() { OR(R.IY.B.l); }
void _CPU_::or_byte(){
	byte n;
	if (RDMEM(R.PC.w, n, &_CPU_::or_byte)) {
		R.PC.w++; OR(n);
	}
}
inline void _CPU_::or_x() {
	byte n;
	if (RDMEM(x.w, n, &_CPU_::or_x)) {
		OR(n);
	}
}
void _CPU_::or_xhl() { x.w = R.HL.w; or_x(); }
void _CPU_::or_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::or_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); or_x();
	}
}
void _CPU_::or_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::or_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); or_x();
	}
}

// SBC A,r
inline void _CPU_::SBC(byte reg) {
	int res = R.AF.B.h - reg - ((R.AF.B.l & C_FLAG) ? 1 : 0);
	R.AF.B.l = ZSXYTable[res & 0xFF] |
	           ((res & 0x100) ? C_FLAG : 0) |
	           N_FLAG |
	           ((R.AF.B.h ^ res ^ reg) & H_FLAG) |
	           (((reg ^ R.AF.B.h) & (R.AF.B.h ^ res) & 0x80) ? V_FLAG : 0);
	R.AF.B.h = res;
}
void _CPU_::sbc_a_a()   { SBC(R.AF.B.h); }
void _CPU_::sbc_a_b()   { SBC(R.BC.B.h); }
void _CPU_::sbc_a_c()   { SBC(R.BC.B.l); }
void _CPU_::sbc_a_d()   { SBC(R.DE.B.h); }
void _CPU_::sbc_a_e()   { SBC(R.DE.B.l); }
void _CPU_::sbc_a_h()   { SBC(R.HL.B.h); }
void _CPU_::sbc_a_l()   { SBC(R.HL.B.l); }
void _CPU_::sbc_a_ixh() { SBC(R.IX.B.h); }
void _CPU_::sbc_a_ixl() { SBC(R.IX.B.l); }
void _CPU_::sbc_a_iyh() { SBC(R.IY.B.h); }
void _CPU_::sbc_a_iyl() { SBC(R.IY.B.l); }
void _CPU_::sbc_a_byte(){
	byte n;
	if (RDMEM(R.PC.w, n, &_CPU_::sbc_a_byte)) {
		R.PC.w++; SBC(n);
	}
}
inline void _CPU_::sbc_a_x() {
	byte n;
	if (RDMEM(x.w, n, &_CPU_::sbc_a_x)) {
		SBC(n);
	}
}
void _CPU_::sbc_a_xhl() { x.w = R.HL.w; sbc_a_x(); }
void _CPU_::sbc_a_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::sbc_a_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); sbc_a_x();
	}
}
void _CPU_::sbc_a_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::sbc_a_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); sbc_a_x();
	}
}

// SUB r
inline void _CPU_::SUB(byte reg) {
	int res = R.AF.B.h - reg;
	R.AF.B.l = ZSXYTable[res & 0xFF] |
	           ((res & 0x100) ? C_FLAG : 0) |
	           N_FLAG |
	           ((R.AF.B.h ^ res ^ reg) & H_FLAG) |
	           (((reg ^ R.AF.B.h) & (R.AF.B.h ^ res) & 0x80) ? V_FLAG : 0);
	R.AF.B.h = res;
}
void _CPU_::sub_a()   { SUB(R.AF.B.h); }
void _CPU_::sub_b()   { SUB(R.BC.B.h); }
void _CPU_::sub_c()   { SUB(R.BC.B.l); }
void _CPU_::sub_d()   { SUB(R.DE.B.h); }
void _CPU_::sub_e()   { SUB(R.DE.B.l); }
void _CPU_::sub_h()   { SUB(R.HL.B.h); }
void _CPU_::sub_l()   { SUB(R.HL.B.l); }
void _CPU_::sub_ixh() { SUB(R.IX.B.h); }
void _CPU_::sub_ixl() { SUB(R.IX.B.l); }
void _CPU_::sub_iyh() { SUB(R.IY.B.h); }
void _CPU_::sub_iyl() { SUB(R.IY.B.l); }
void _CPU_::sub_byte(){
	byte n;
	if (RDMEM(R.PC.w, n, &_CPU_::sub_byte)) {
		R.PC.w++; SUB(n);
	}
}
inline void _CPU_::sub_x() {
	byte n;
	if (RDMEM(x.w, n, &_CPU_::sub_x)) {
		SUB(n);
	}
}
void _CPU_::sub_xhl() { x.w = R.HL.w; sub_x(); }
void _CPU_::sub_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::sub_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); sub_x();
	}
}
void _CPU_::sub_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::sub_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); sub_x();
	}
}

// XOR r
inline void _CPU_::XOR(byte reg) {
	R.AF.B.h ^= reg;
	R.AF.B.l = ZSPXYTable[R.AF.B.h];
	
}
void _CPU_::xor_a()   { XOR(R.AF.B.h); }
void _CPU_::xor_b()   { XOR(R.BC.B.h); }
void _CPU_::xor_c()   { XOR(R.BC.B.l); }
void _CPU_::xor_d()   { XOR(R.DE.B.h); }
void _CPU_::xor_e()   { XOR(R.DE.B.l); }
void _CPU_::xor_h()   { XOR(R.HL.B.h); }
void _CPU_::xor_l()   { XOR(R.HL.B.l); }
void _CPU_::xor_ixh() { XOR(R.IX.B.h); }
void _CPU_::xor_ixl() { XOR(R.IX.B.l); }
void _CPU_::xor_iyh() { XOR(R.IY.B.h); }
void _CPU_::xor_iyl() { XOR(R.IY.B.l); }
void _CPU_::xor_byte(){
	byte n;
	if (RDMEM(R.PC.w, n, &_CPU_::xor_byte)) {
		R.PC.w++; XOR(n);
	}
}
inline void _CPU_::xor_x() {
	byte n;
	if (RDMEM(x.w, n, &_CPU_::xor_x)) {
		XOR(n);
	}
}
void _CPU_::xor_xhl() { x.w = R.HL.w; xor_x(); }
void _CPU_::xor_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::xor_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); xor_x();
	}
}
void _CPU_::xor_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::xor_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); xor_x();
	}
}


// DEC r
inline void _CPU_::DEC(byte &reg) {
	reg--;
	R.AF.B.l = (R.AF.B.l & C_FLAG) |
	           ((reg == 0x7f) ? V_FLAG : 0) |
	           (((reg & 0x0f) == 0x0f) ? H_FLAG : 0) |
	           ZSXYTable[reg] |
	           N_FLAG;
}
void _CPU_::dec_a()   { DEC(R.AF.B.h); }
void _CPU_::dec_b()   { DEC(R.BC.B.h); }
void _CPU_::dec_c()   { DEC(R.BC.B.l); }
void _CPU_::dec_d()   { DEC(R.DE.B.h); }
void _CPU_::dec_e()   { DEC(R.DE.B.l); }
void _CPU_::dec_h()   { DEC(R.HL.B.h); }
void _CPU_::dec_l()   { DEC(R.HL.B.l); }
void _CPU_::dec_ixh() { DEC(R.IX.B.h); }
void _CPU_::dec_ixl() { DEC(R.IX.B.l); }
void _CPU_::dec_iyh() { DEC(R.IY.B.h); }
void _CPU_::dec_iyl() { DEC(R.IY.B.l); }

inline void _CPU_::DEC_X() {
	if (RDMEM(x.w, dummy, &_CPU_::DEC_X)) {
		DEC(dummy); SMALL_DELAY(); DEC_X1();
	}
}
inline void _CPU_::DEC_X1() {
	if (WRMEM(x.w, dummy, &_CPU_::DEC_X1)) {
	}
}
void _CPU_::dec_xhl() { x.w = R.HL.w; DEC_X(); }
void _CPU_::dec_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::dec_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); DEC_X();
	}
}
void _CPU_::dec_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::dec_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); DEC_X();
	}
}

// INC r
inline void _CPU_::INC(byte &reg) {
	reg++;
	R.AF.B.l = (R.AF.B.l & C_FLAG) |
	           ((reg == 0x80) ? V_FLAG : 0) |
	           (((reg & 0x0f) == 0x00) ? H_FLAG : 0) |
	           ZSXYTable[reg];
}
void _CPU_::inc_a()   { INC(R.AF.B.h); }
void _CPU_::inc_b()   { INC(R.BC.B.h); }
void _CPU_::inc_c()   { INC(R.BC.B.l); }
void _CPU_::inc_d()   { INC(R.DE.B.h); }
void _CPU_::inc_e()   { INC(R.DE.B.l); }
void _CPU_::inc_h()   { INC(R.HL.B.h); }
void _CPU_::inc_l()   { INC(R.HL.B.l); }
void _CPU_::inc_ixh() { INC(R.IX.B.h); }
void _CPU_::inc_ixl() { INC(R.IX.B.l); }
void _CPU_::inc_iyh() { INC(R.IY.B.h); }
void _CPU_::inc_iyl() { INC(R.IY.B.l); }

inline void _CPU_::INC_X() {
	if (RDMEM(x.w, dummy, &_CPU_::INC_X)) {
		INC(dummy); SMALL_DELAY(); INC_X1();
	}
}
inline void _CPU_::INC_X1() {
	if (WRMEM(x.w, dummy, &_CPU_::INC_X1)) {
	}
}
void _CPU_::inc_xhl() { x.w = R.HL.w; INC_X(); }
void _CPU_::inc_xix() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::inc_xix)) {
		R.PC.w++; x.w = R.IX.w + ofst; ADD_16_8_DELAY(); INC_X();
	}
}
void _CPU_::inc_xiy() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::inc_xiy)) {
		R.PC.w++; x.w = R.IY.w + ofst; ADD_16_8_DELAY(); INC_X();
	}
}


// ADC HL,ss
inline void _CPU_::ADCW(word reg) {
	int res = R.HL.w + reg + ((R.AF.B.l & C_FLAG) ? 1 : 0);
	R.AF.B.l = (((R.HL.w ^ res ^ reg) >> 8) & H_FLAG) |
	           ((res & 0x10000) ? C_FLAG : 0) |
	           ((res & 0xffff) ? 0 : Z_FLAG) |
	           (((reg ^ R.HL.w ^ 0x8000) & (reg ^ res) & 0x8000) ? V_FLAG : 0) |
	           ((res >> 8) & (S_FLAG | X_FLAG | Y_FLAG));
	R.HL.w = res;
	OP_16_16_DELAY();
}
void _CPU_::adc_hl_bc() { ADCW(R.BC.w); }
void _CPU_::adc_hl_de() { ADCW(R.DE.w); }
void _CPU_::adc_hl_hl() { ADCW(R.HL.w); }
void _CPU_::adc_hl_sp() { ADCW(R.SP.w); }

// ADD HL/IX/IY,ss
inline void _CPU_::ADDW(word &reg1, word reg2) {
	int res = reg1 + reg2;
	R.AF.B.l = (R.AF.B.l & (S_FLAG | Z_FLAG | V_FLAG)) |
	           (((reg1 ^ res ^ reg2) >> 8) & H_FLAG) |
	           ((res & 0x10000) ? C_FLAG : 0) |
	           ((res >> 8) & (X_FLAG | Y_FLAG));
	reg1 = res;
	OP_16_16_DELAY();
}
void _CPU_::add_hl_bc() { ADDW(R.HL.w, R.BC.w); }
void _CPU_::add_hl_de() { ADDW(R.HL.w, R.DE.w); }
void _CPU_::add_hl_hl() { ADDW(R.HL.w, R.HL.w); }
void _CPU_::add_hl_sp() { ADDW(R.HL.w, R.SP.w); }
void _CPU_::add_ix_bc() { ADDW(R.IX.w, R.BC.w); }
void _CPU_::add_ix_de() { ADDW(R.IX.w, R.DE.w); }
void _CPU_::add_ix_ix() { ADDW(R.IX.w, R.IX.w); }
void _CPU_::add_ix_sp() { ADDW(R.IX.w, R.SP.w); }
void _CPU_::add_iy_bc() { ADDW(R.IY.w, R.BC.w); }
void _CPU_::add_iy_de() { ADDW(R.IY.w, R.DE.w); }
void _CPU_::add_iy_iy() { ADDW(R.IY.w, R.IY.w); }
void _CPU_::add_iy_sp() { ADDW(R.IY.w, R.SP.w); }

// SBC HL,ss
inline void _CPU_::SBCW(word reg) {
	int res = R.HL.w - reg - ((R.AF.B.l & C_FLAG) ? 1 : 0);
	R.AF.B.l = (((R.HL.w ^ res ^ reg) >> 8) & H_FLAG) |
	           ((res & 0x10000) ? C_FLAG : 0) |
	           ((res & 0xffff) ? 0 : Z_FLAG) |
	           (((reg ^ R.HL.w) & (R.HL.w ^ res) & 0x8000) ? V_FLAG : 0) |
		   ((res >> 8) & (S_FLAG | X_FLAG | Y_FLAG)) |
	           N_FLAG;
	R.HL.w = res;
	OP_16_16_DELAY();
}
void _CPU_::sbc_hl_bc() { SBCW(R.BC.w); }
void _CPU_::sbc_hl_de() { SBCW(R.DE.w); }
void _CPU_::sbc_hl_hl() { SBCW(R.HL.w); }
void _CPU_::sbc_hl_sp() { SBCW(R.SP.w); }


// DEC ss
void _CPU_::dec_bc() { --R.BC.w; INC_16_DELAY(); }
void _CPU_::dec_de() { --R.DE.w; INC_16_DELAY(); }
void _CPU_::dec_hl() { --R.HL.w; INC_16_DELAY(); }
void _CPU_::dec_ix() { --R.IX.w; INC_16_DELAY(); }
void _CPU_::dec_iy() { --R.IY.w; INC_16_DELAY(); }
void _CPU_::dec_sp() { --R.SP.w; INC_16_DELAY(); }

// INC ss
void _CPU_::inc_bc() { ++R.BC.w; INC_16_DELAY(); }
void _CPU_::inc_de() { ++R.DE.w; INC_16_DELAY(); }
void _CPU_::inc_hl() { ++R.HL.w; INC_16_DELAY(); }
void _CPU_::inc_ix() { ++R.IX.w; INC_16_DELAY(); }
void _CPU_::inc_iy() { ++R.IY.w; INC_16_DELAY(); }
void _CPU_::inc_sp() { ++R.SP.w; INC_16_DELAY(); }


// BIT n,r
inline void _CPU_::BIT(int b, byte reg) {
	R.AF.B.l = (R.AF.B.l & C_FLAG) | 
	           ZSPTable[reg & (1 << b)] |
		   (reg & (X_FLAG | Y_FLAG)) |
		   H_FLAG;
}
void _CPU_::bit_0_a() { BIT(0, R.AF.B.h); }
void _CPU_::bit_0_b() { BIT(0, R.BC.B.h); }
void _CPU_::bit_0_c() { BIT(0, R.BC.B.l); }
void _CPU_::bit_0_d() { BIT(0, R.DE.B.h); }
void _CPU_::bit_0_e() { BIT(0, R.DE.B.l); }
void _CPU_::bit_0_h() { BIT(0, R.HL.B.h); }
void _CPU_::bit_0_l() { BIT(0, R.HL.B.l); }
void _CPU_::bit_1_a() { BIT(1, R.AF.B.h); }
void _CPU_::bit_1_b() { BIT(1, R.BC.B.h); }
void _CPU_::bit_1_c() { BIT(1, R.BC.B.l); }
void _CPU_::bit_1_d() { BIT(1, R.DE.B.h); }
void _CPU_::bit_1_e() { BIT(1, R.DE.B.l); }
void _CPU_::bit_1_h() { BIT(1, R.HL.B.h); }
void _CPU_::bit_1_l() { BIT(1, R.HL.B.l); }
void _CPU_::bit_2_a() { BIT(2, R.AF.B.h); }
void _CPU_::bit_2_b() { BIT(2, R.BC.B.h); }
void _CPU_::bit_2_c() { BIT(2, R.BC.B.l); }
void _CPU_::bit_2_d() { BIT(2, R.DE.B.h); }
void _CPU_::bit_2_e() { BIT(2, R.DE.B.l); }
void _CPU_::bit_2_h() { BIT(2, R.HL.B.h); }
void _CPU_::bit_2_l() { BIT(2, R.HL.B.l); }
void _CPU_::bit_3_a() { BIT(3, R.AF.B.h); }
void _CPU_::bit_3_b() { BIT(3, R.BC.B.h); }
void _CPU_::bit_3_c() { BIT(3, R.BC.B.l); }
void _CPU_::bit_3_d() { BIT(3, R.DE.B.h); }
void _CPU_::bit_3_e() { BIT(3, R.DE.B.l); }
void _CPU_::bit_3_h() { BIT(3, R.HL.B.h); }
void _CPU_::bit_3_l() { BIT(3, R.HL.B.l); }
void _CPU_::bit_4_a() { BIT(4, R.AF.B.h); }
void _CPU_::bit_4_b() { BIT(4, R.BC.B.h); }
void _CPU_::bit_4_c() { BIT(4, R.BC.B.l); }
void _CPU_::bit_4_d() { BIT(4, R.DE.B.h); }
void _CPU_::bit_4_e() { BIT(4, R.DE.B.l); }
void _CPU_::bit_4_h() { BIT(4, R.HL.B.h); }
void _CPU_::bit_4_l() { BIT(4, R.HL.B.l); }
void _CPU_::bit_5_a() { BIT(5, R.AF.B.h); }
void _CPU_::bit_5_b() { BIT(5, R.BC.B.h); }
void _CPU_::bit_5_c() { BIT(5, R.BC.B.l); }
void _CPU_::bit_5_d() { BIT(5, R.DE.B.h); }
void _CPU_::bit_5_e() { BIT(5, R.DE.B.l); }
void _CPU_::bit_5_h() { BIT(5, R.HL.B.h); }
void _CPU_::bit_5_l() { BIT(5, R.HL.B.l); }
void _CPU_::bit_6_a() { BIT(6, R.AF.B.h); }
void _CPU_::bit_6_b() { BIT(6, R.BC.B.h); }
void _CPU_::bit_6_c() { BIT(6, R.BC.B.l); }
void _CPU_::bit_6_d() { BIT(6, R.DE.B.h); }
void _CPU_::bit_6_e() { BIT(6, R.DE.B.l); }
void _CPU_::bit_6_h() { BIT(6, R.HL.B.h); }
void _CPU_::bit_6_l() { BIT(6, R.HL.B.l); }
void _CPU_::bit_7_a() { BIT(7, R.AF.B.h); }
void _CPU_::bit_7_b() { BIT(7, R.BC.B.h); }
void _CPU_::bit_7_c() { BIT(7, R.BC.B.l); }
void _CPU_::bit_7_d() { BIT(7, R.DE.B.h); }
void _CPU_::bit_7_e() { BIT(7, R.DE.B.l); }
void _CPU_::bit_7_h() { BIT(7, R.HL.B.h); }
void _CPU_::bit_7_l() { BIT(7, R.HL.B.l); }

inline void _CPU_::BIT_HL() {
	byte n;
	if (RDMEM(R.HL.w, n, &_CPU_::BIT_HL)) {
		R.AF.B.l = (R.AF.B.l & C_FLAG) |
			    ZSPTable[n & (1 << bit)] |
			    //TODO
			    H_FLAG;
		SMALL_DELAY();
	}
}
void _CPU_::bit_0_xhl() { bit = 0; BIT_HL(); }
void _CPU_::bit_1_xhl() { bit = 1; BIT_HL(); }
void _CPU_::bit_2_xhl() { bit = 2; BIT_HL(); }
void _CPU_::bit_3_xhl() { bit = 3; BIT_HL(); }
void _CPU_::bit_4_xhl() { bit = 4; BIT_HL(); }
void _CPU_::bit_5_xhl() { bit = 5; BIT_HL(); }
void _CPU_::bit_6_xhl() { bit = 6; BIT_HL(); }
void _CPU_::bit_7_xhl() { bit = 7; BIT_HL(); }

inline void _CPU_::BIT_IX() {
	byte n;
	word addr = R.IX.w + ofst;
	if (RDMEM(addr, n, &_CPU_::BIT_IX)) {
		R.AF.B.l = (R.AF.B.l & C_FLAG) | 
			   ZSPTable[n & (1 << bit)] | 
			   H_FLAG |
			   ((addr >> 8) & (X_FLAG | Y_FLAG));
		SMALL_DELAY();
	}
}
void _CPU_::bit_0_xix() { bit = 0; BIT_IX(); }
void _CPU_::bit_1_xix() { bit = 1; BIT_IX(); }
void _CPU_::bit_2_xix() { bit = 2; BIT_IX(); }
void _CPU_::bit_3_xix() { bit = 3; BIT_IX(); }
void _CPU_::bit_4_xix() { bit = 4; BIT_IX(); }
void _CPU_::bit_5_xix() { bit = 5; BIT_IX(); }
void _CPU_::bit_6_xix() { bit = 6; BIT_IX(); }
void _CPU_::bit_7_xix() { bit = 7; BIT_IX(); }

inline void _CPU_::BIT_IY() {
	byte n;
	word addr = R.IY.w + ofst;
	if (RDMEM(addr, n, &_CPU_::BIT_IY)) {
		R.AF.B.l = (R.AF.B.l & C_FLAG) | 
			   ZSPTable[n & (1 << bit)] | 
			   H_FLAG |
			   ((addr >> 8) & (X_FLAG | Y_FLAG));
		SMALL_DELAY();
	}
}
void _CPU_::bit_0_xiy() { bit = 0; BIT_IY(); }
void _CPU_::bit_1_xiy() { bit = 1; BIT_IY(); }
void _CPU_::bit_2_xiy() { bit = 2; BIT_IY(); }
void _CPU_::bit_3_xiy() { bit = 3; BIT_IY(); }
void _CPU_::bit_4_xiy() { bit = 4; BIT_IY(); }
void _CPU_::bit_5_xiy() { bit = 5; BIT_IY(); }
void _CPU_::bit_6_xiy() { bit = 6; BIT_IY(); }
void _CPU_::bit_7_xiy() { bit = 7; BIT_IY(); }


// RES n,r
inline void _CPU_::RES(int b, byte &reg) { reg &= ~(1 << b); }
void _CPU_::res_0_a() { RES(0, R.AF.B.h); }
void _CPU_::res_0_b() { RES(0, R.BC.B.h); }
void _CPU_::res_0_c() { RES(0, R.BC.B.l); }
void _CPU_::res_0_d() { RES(0, R.DE.B.h); }
void _CPU_::res_0_e() { RES(0, R.DE.B.l); }
void _CPU_::res_0_h() { RES(0, R.HL.B.h); }
void _CPU_::res_0_l() { RES(0, R.HL.B.l); }
void _CPU_::res_1_a() { RES(1, R.AF.B.h); }
void _CPU_::res_1_b() { RES(1, R.BC.B.h); }
void _CPU_::res_1_c() { RES(1, R.BC.B.l); }
void _CPU_::res_1_d() { RES(1, R.DE.B.h); }
void _CPU_::res_1_e() { RES(1, R.DE.B.l); }
void _CPU_::res_1_h() { RES(1, R.HL.B.h); }
void _CPU_::res_1_l() { RES(1, R.HL.B.l); }
void _CPU_::res_2_a() { RES(2, R.AF.B.h); }
void _CPU_::res_2_b() { RES(2, R.BC.B.h); }
void _CPU_::res_2_c() { RES(2, R.BC.B.l); }
void _CPU_::res_2_d() { RES(2, R.DE.B.h); }
void _CPU_::res_2_e() { RES(2, R.DE.B.l); }
void _CPU_::res_2_h() { RES(2, R.HL.B.h); }
void _CPU_::res_2_l() { RES(2, R.HL.B.l); }
void _CPU_::res_3_a() { RES(3, R.AF.B.h); }
void _CPU_::res_3_b() { RES(3, R.BC.B.h); }
void _CPU_::res_3_c() { RES(3, R.BC.B.l); }
void _CPU_::res_3_d() { RES(3, R.DE.B.h); }
void _CPU_::res_3_e() { RES(3, R.DE.B.l); }
void _CPU_::res_3_h() { RES(3, R.HL.B.h); }
void _CPU_::res_3_l() { RES(3, R.HL.B.l); }
void _CPU_::res_4_a() { RES(4, R.AF.B.h); }
void _CPU_::res_4_b() { RES(4, R.BC.B.h); }
void _CPU_::res_4_c() { RES(4, R.BC.B.l); }
void _CPU_::res_4_d() { RES(4, R.DE.B.h); }
void _CPU_::res_4_e() { RES(4, R.DE.B.l); }
void _CPU_::res_4_h() { RES(4, R.HL.B.h); }
void _CPU_::res_4_l() { RES(4, R.HL.B.l); }
void _CPU_::res_5_a() { RES(5, R.AF.B.h); }
void _CPU_::res_5_b() { RES(5, R.BC.B.h); }
void _CPU_::res_5_c() { RES(5, R.BC.B.l); }
void _CPU_::res_5_d() { RES(5, R.DE.B.h); }
void _CPU_::res_5_e() { RES(5, R.DE.B.l); }
void _CPU_::res_5_h() { RES(5, R.HL.B.h); }
void _CPU_::res_5_l() { RES(5, R.HL.B.l); }
void _CPU_::res_6_a() { RES(6, R.AF.B.h); }
void _CPU_::res_6_b() { RES(6, R.BC.B.h); }
void _CPU_::res_6_c() { RES(6, R.BC.B.l); }
void _CPU_::res_6_d() { RES(6, R.DE.B.h); }
void _CPU_::res_6_e() { RES(6, R.DE.B.l); }
void _CPU_::res_6_h() { RES(6, R.HL.B.h); }
void _CPU_::res_6_l() { RES(6, R.HL.B.l); }
void _CPU_::res_7_a() { RES(7, R.AF.B.h); }
void _CPU_::res_7_b() { RES(7, R.BC.B.h); }
void _CPU_::res_7_c() { RES(7, R.BC.B.l); }
void _CPU_::res_7_d() { RES(7, R.DE.B.h); }
void _CPU_::res_7_e() { RES(7, R.DE.B.l); }
void _CPU_::res_7_h() { RES(7, R.HL.B.h); }
void _CPU_::res_7_l() { RES(7, R.HL.B.l); }

inline void _CPU_::RES_X() {
	if (RDMEM(x.w, *p, &_CPU_::RES_X)) {
		RES(bit, *p); 
		SMALL_DELAY();
		RES_X2();
	}
}
inline void _CPU_::RES_X2() {
	if (WRMEM(x.w, *p, &_CPU_::RES_X2)) {
	}
}
void _CPU_::res_0_xhl()   { bit = 0; x.w = R.HL.w; p = &dummy; RES_X(); }
void _CPU_::res_1_xhl()   { bit = 1; x.w = R.HL.w; p = &dummy; RES_X(); }
void _CPU_::res_2_xhl()   { bit = 2; x.w = R.HL.w; p = &dummy; RES_X(); }
void _CPU_::res_3_xhl()   { bit = 3; x.w = R.HL.w; p = &dummy; RES_X(); }
void _CPU_::res_4_xhl()   { bit = 4; x.w = R.HL.w; p = &dummy; RES_X(); }
void _CPU_::res_5_xhl()   { bit = 5; x.w = R.HL.w; p = &dummy; RES_X(); }
void _CPU_::res_6_xhl()   { bit = 6; x.w = R.HL.w; p = &dummy; RES_X(); }
void _CPU_::res_7_xhl()   { bit = 7; x.w = R.HL.w; p = &dummy; RES_X(); }

void _CPU_::res_0_xix  () { bit = 0; x.w = R.IX.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_1_xix  () { bit = 1; x.w = R.IX.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_2_xix  () { bit = 2; x.w = R.IX.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_3_xix  () { bit = 3; x.w = R.IX.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_4_xix  () { bit = 4; x.w = R.IX.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_5_xix  () { bit = 5; x.w = R.IX.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_6_xix  () { bit = 6; x.w = R.IX.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_7_xix  () { bit = 7; x.w = R.IX.w + ofst; p = &dummy; RES_X(); }

void _CPU_::res_0_xiy  () { bit = 0; x.w = R.IY.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_1_xiy  () { bit = 1; x.w = R.IY.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_2_xiy  () { bit = 2; x.w = R.IY.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_3_xiy  () { bit = 3; x.w = R.IY.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_4_xiy  () { bit = 4; x.w = R.IY.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_5_xiy  () { bit = 5; x.w = R.IY.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_6_xiy  () { bit = 6; x.w = R.IY.w + ofst; p = &dummy; RES_X(); }
void _CPU_::res_7_xiy  () { bit = 7; x.w = R.IY.w + ofst; p = &dummy; RES_X(); }

void _CPU_::res_0_xix_a() { bit = 0; x.w = R.IX.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_0_xix_b() { bit = 0; x.w = R.IX.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_0_xix_c() { bit = 0; x.w = R.IX.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_0_xix_d() { bit = 0; x.w = R.IX.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_0_xix_e() { bit = 0; x.w = R.IX.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_0_xix_h() { bit = 0; x.w = R.IX.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_0_xix_l() { bit = 0; x.w = R.IX.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_1_xix_a() { bit = 1; x.w = R.IX.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_1_xix_b() { bit = 1; x.w = R.IX.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_1_xix_c() { bit = 1; x.w = R.IX.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_1_xix_d() { bit = 1; x.w = R.IX.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_1_xix_e() { bit = 1; x.w = R.IX.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_1_xix_h() { bit = 1; x.w = R.IX.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_1_xix_l() { bit = 1; x.w = R.IX.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_2_xix_a() { bit = 2; x.w = R.IX.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_2_xix_b() { bit = 2; x.w = R.IX.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_2_xix_c() { bit = 2; x.w = R.IX.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_2_xix_d() { bit = 2; x.w = R.IX.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_2_xix_e() { bit = 2; x.w = R.IX.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_2_xix_h() { bit = 2; x.w = R.IX.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_2_xix_l() { bit = 2; x.w = R.IX.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_3_xix_a() { bit = 3; x.w = R.IX.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_3_xix_b() { bit = 3; x.w = R.IX.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_3_xix_c() { bit = 3; x.w = R.IX.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_3_xix_d() { bit = 3; x.w = R.IX.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_3_xix_e() { bit = 3; x.w = R.IX.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_3_xix_h() { bit = 3; x.w = R.IX.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_3_xix_l() { bit = 3; x.w = R.IX.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_4_xix_a() { bit = 4; x.w = R.IX.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_4_xix_b() { bit = 4; x.w = R.IX.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_4_xix_c() { bit = 4; x.w = R.IX.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_4_xix_d() { bit = 4; x.w = R.IX.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_4_xix_e() { bit = 4; x.w = R.IX.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_4_xix_h() { bit = 4; x.w = R.IX.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_4_xix_l() { bit = 4; x.w = R.IX.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_5_xix_a() { bit = 5; x.w = R.IX.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_5_xix_b() { bit = 5; x.w = R.IX.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_5_xix_c() { bit = 5; x.w = R.IX.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_5_xix_d() { bit = 5; x.w = R.IX.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_5_xix_e() { bit = 5; x.w = R.IX.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_5_xix_h() { bit = 5; x.w = R.IX.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_5_xix_l() { bit = 5; x.w = R.IX.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_6_xix_a() { bit = 6; x.w = R.IX.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_6_xix_b() { bit = 6; x.w = R.IX.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_6_xix_c() { bit = 6; x.w = R.IX.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_6_xix_d() { bit = 6; x.w = R.IX.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_6_xix_e() { bit = 6; x.w = R.IX.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_6_xix_h() { bit = 6; x.w = R.IX.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_6_xix_l() { bit = 6; x.w = R.IX.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_7_xix_a() { bit = 7; x.w = R.IX.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_7_xix_b() { bit = 7; x.w = R.IX.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_7_xix_c() { bit = 7; x.w = R.IX.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_7_xix_d() { bit = 7; x.w = R.IX.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_7_xix_e() { bit = 7; x.w = R.IX.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_7_xix_h() { bit = 7; x.w = R.IX.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_7_xix_l() { bit = 7; x.w = R.IX.w + ofst; p = &R.HL.B.l; RES_X(); }

void _CPU_::res_0_xiy_a() { bit = 0; x.w = R.IY.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_0_xiy_b() { bit = 0; x.w = R.IY.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_0_xiy_c() { bit = 0; x.w = R.IY.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_0_xiy_d() { bit = 0; x.w = R.IY.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_0_xiy_e() { bit = 0; x.w = R.IY.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_0_xiy_h() { bit = 0; x.w = R.IY.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_0_xiy_l() { bit = 0; x.w = R.IY.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_1_xiy_a() { bit = 1; x.w = R.IY.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_1_xiy_b() { bit = 1; x.w = R.IY.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_1_xiy_c() { bit = 1; x.w = R.IY.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_1_xiy_d() { bit = 1; x.w = R.IY.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_1_xiy_e() { bit = 1; x.w = R.IY.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_1_xiy_h() { bit = 1; x.w = R.IY.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_1_xiy_l() { bit = 1; x.w = R.IY.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_2_xiy_a() { bit = 2; x.w = R.IY.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_2_xiy_b() { bit = 2; x.w = R.IY.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_2_xiy_c() { bit = 2; x.w = R.IY.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_2_xiy_d() { bit = 2; x.w = R.IY.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_2_xiy_e() { bit = 2; x.w = R.IY.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_2_xiy_h() { bit = 2; x.w = R.IY.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_2_xiy_l() { bit = 2; x.w = R.IY.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_3_xiy_a() { bit = 3; x.w = R.IY.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_3_xiy_b() { bit = 3; x.w = R.IY.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_3_xiy_c() { bit = 3; x.w = R.IY.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_3_xiy_d() { bit = 3; x.w = R.IY.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_3_xiy_e() { bit = 3; x.w = R.IY.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_3_xiy_h() { bit = 3; x.w = R.IY.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_3_xiy_l() { bit = 3; x.w = R.IY.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_4_xiy_a() { bit = 4; x.w = R.IY.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_4_xiy_b() { bit = 4; x.w = R.IY.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_4_xiy_c() { bit = 4; x.w = R.IY.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_4_xiy_d() { bit = 4; x.w = R.IY.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_4_xiy_e() { bit = 4; x.w = R.IY.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_4_xiy_h() { bit = 4; x.w = R.IY.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_4_xiy_l() { bit = 4; x.w = R.IY.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_5_xiy_a() { bit = 5; x.w = R.IY.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_5_xiy_b() { bit = 5; x.w = R.IY.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_5_xiy_c() { bit = 5; x.w = R.IY.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_5_xiy_d() { bit = 5; x.w = R.IY.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_5_xiy_e() { bit = 5; x.w = R.IY.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_5_xiy_h() { bit = 5; x.w = R.IY.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_5_xiy_l() { bit = 5; x.w = R.IY.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_6_xiy_a() { bit = 6; x.w = R.IY.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_6_xiy_b() { bit = 6; x.w = R.IY.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_6_xiy_c() { bit = 6; x.w = R.IY.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_6_xiy_d() { bit = 6; x.w = R.IY.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_6_xiy_e() { bit = 6; x.w = R.IY.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_6_xiy_h() { bit = 6; x.w = R.IY.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_6_xiy_l() { bit = 6; x.w = R.IY.w + ofst; p = &R.HL.B.l; RES_X(); }
void _CPU_::res_7_xiy_a() { bit = 7; x.w = R.IY.w + ofst; p = &R.AF.B.h; RES_X(); }
void _CPU_::res_7_xiy_b() { bit = 7; x.w = R.IY.w + ofst; p = &R.BC.B.h; RES_X(); }
void _CPU_::res_7_xiy_c() { bit = 7; x.w = R.IY.w + ofst; p = &R.BC.B.l; RES_X(); }
void _CPU_::res_7_xiy_d() { bit = 7; x.w = R.IY.w + ofst; p = &R.DE.B.h; RES_X(); }
void _CPU_::res_7_xiy_e() { bit = 7; x.w = R.IY.w + ofst; p = &R.DE.B.l; RES_X(); }
void _CPU_::res_7_xiy_h() { bit = 7; x.w = R.IY.w + ofst; p = &R.HL.B.h; RES_X(); }
void _CPU_::res_7_xiy_l() { bit = 7; x.w = R.IY.w + ofst; p = &R.HL.B.l; RES_X(); }


// SET n,r
inline void _CPU_::SET(int b, byte &reg) { reg |= (1 << b); }
void _CPU_::set_0_a() { SET(0, R.AF.B.h); }
void _CPU_::set_0_b() { SET(0, R.BC.B.h); }
void _CPU_::set_0_c() { SET(0, R.BC.B.l); }
void _CPU_::set_0_d() { SET(0, R.DE.B.h); }
void _CPU_::set_0_e() { SET(0, R.DE.B.l); }
void _CPU_::set_0_h() { SET(0, R.HL.B.h); }
void _CPU_::set_0_l() { SET(0, R.HL.B.l); }
void _CPU_::set_1_a() { SET(1, R.AF.B.h); }
void _CPU_::set_1_b() { SET(1, R.BC.B.h); }
void _CPU_::set_1_c() { SET(1, R.BC.B.l); }
void _CPU_::set_1_d() { SET(1, R.DE.B.h); }
void _CPU_::set_1_e() { SET(1, R.DE.B.l); }
void _CPU_::set_1_h() { SET(1, R.HL.B.h); }
void _CPU_::set_1_l() { SET(1, R.HL.B.l); }
void _CPU_::set_2_a() { SET(2, R.AF.B.h); }
void _CPU_::set_2_b() { SET(2, R.BC.B.h); }
void _CPU_::set_2_c() { SET(2, R.BC.B.l); }
void _CPU_::set_2_d() { SET(2, R.DE.B.h); }
void _CPU_::set_2_e() { SET(2, R.DE.B.l); }
void _CPU_::set_2_h() { SET(2, R.HL.B.h); }
void _CPU_::set_2_l() { SET(2, R.HL.B.l); }
void _CPU_::set_3_a() { SET(3, R.AF.B.h); }
void _CPU_::set_3_b() { SET(3, R.BC.B.h); }
void _CPU_::set_3_c() { SET(3, R.BC.B.l); }
void _CPU_::set_3_d() { SET(3, R.DE.B.h); }
void _CPU_::set_3_e() { SET(3, R.DE.B.l); }
void _CPU_::set_3_h() { SET(3, R.HL.B.h); }
void _CPU_::set_3_l() { SET(3, R.HL.B.l); }
void _CPU_::set_4_a() { SET(4, R.AF.B.h); }
void _CPU_::set_4_b() { SET(4, R.BC.B.h); }
void _CPU_::set_4_c() { SET(4, R.BC.B.l); }
void _CPU_::set_4_d() { SET(4, R.DE.B.h); }
void _CPU_::set_4_e() { SET(4, R.DE.B.l); }
void _CPU_::set_4_h() { SET(4, R.HL.B.h); }
void _CPU_::set_4_l() { SET(4, R.HL.B.l); }
void _CPU_::set_5_a() { SET(5, R.AF.B.h); }
void _CPU_::set_5_b() { SET(5, R.BC.B.h); }
void _CPU_::set_5_c() { SET(5, R.BC.B.l); }
void _CPU_::set_5_d() { SET(5, R.DE.B.h); }
void _CPU_::set_5_e() { SET(5, R.DE.B.l); }
void _CPU_::set_5_h() { SET(5, R.HL.B.h); }
void _CPU_::set_5_l() { SET(5, R.HL.B.l); }
void _CPU_::set_6_a() { SET(6, R.AF.B.h); }
void _CPU_::set_6_b() { SET(6, R.BC.B.h); }
void _CPU_::set_6_c() { SET(6, R.BC.B.l); }
void _CPU_::set_6_d() { SET(6, R.DE.B.h); }
void _CPU_::set_6_e() { SET(6, R.DE.B.l); }
void _CPU_::set_6_h() { SET(6, R.HL.B.h); }
void _CPU_::set_6_l() { SET(6, R.HL.B.l); }
void _CPU_::set_7_a() { SET(7, R.AF.B.h); }
void _CPU_::set_7_b() { SET(7, R.BC.B.h); }
void _CPU_::set_7_c() { SET(7, R.BC.B.l); }
void _CPU_::set_7_d() { SET(7, R.DE.B.h); }
void _CPU_::set_7_e() { SET(7, R.DE.B.l); }
void _CPU_::set_7_h() { SET(7, R.HL.B.h); }
void _CPU_::set_7_l() { SET(7, R.HL.B.l); }

inline void _CPU_::SET_X() {
	if (RDMEM(x.w, *p, &_CPU_::SET_X)) {
		SET(bit, *p); 
		SMALL_DELAY();
		SET_X2();
	}
}
inline void _CPU_::SET_X2() {
	if (WRMEM(x.w, *p, &_CPU_::SET_X2)) {
	}
}
void _CPU_::set_0_xhl()   { bit = 0; x.w = R.HL.w; p = &dummy; SET_X(); }
void _CPU_::set_1_xhl()   { bit = 1; x.w = R.HL.w; p = &dummy; SET_X(); }
void _CPU_::set_2_xhl()   { bit = 2; x.w = R.HL.w; p = &dummy; SET_X(); }
void _CPU_::set_3_xhl()   { bit = 3; x.w = R.HL.w; p = &dummy; SET_X(); }
void _CPU_::set_4_xhl()   { bit = 4; x.w = R.HL.w; p = &dummy; SET_X(); }
void _CPU_::set_5_xhl()   { bit = 5; x.w = R.HL.w; p = &dummy; SET_X(); }
void _CPU_::set_6_xhl()   { bit = 6; x.w = R.HL.w; p = &dummy; SET_X(); }
void _CPU_::set_7_xhl()   { bit = 7; x.w = R.HL.w; p = &dummy; SET_X(); }

void _CPU_::set_0_xix  () { bit = 0; x.w = R.IX.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_1_xix  () { bit = 1; x.w = R.IX.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_2_xix  () { bit = 2; x.w = R.IX.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_3_xix  () { bit = 3; x.w = R.IX.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_4_xix  () { bit = 4; x.w = R.IX.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_5_xix  () { bit = 5; x.w = R.IX.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_6_xix  () { bit = 6; x.w = R.IX.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_7_xix  () { bit = 7; x.w = R.IX.w + ofst; p = &dummy; SET_X(); }

void _CPU_::set_0_xiy  () { bit = 0; x.w = R.IY.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_1_xiy  () { bit = 1; x.w = R.IY.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_2_xiy  () { bit = 2; x.w = R.IY.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_3_xiy  () { bit = 3; x.w = R.IY.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_4_xiy  () { bit = 4; x.w = R.IY.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_5_xiy  () { bit = 5; x.w = R.IY.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_6_xiy  () { bit = 6; x.w = R.IY.w + ofst; p = &dummy; SET_X(); }
void _CPU_::set_7_xiy  () { bit = 7; x.w = R.IY.w + ofst; p = &dummy; SET_X(); }

void _CPU_::set_0_xix_a() { bit = 0; x.w = R.IX.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_0_xix_b() { bit = 0; x.w = R.IX.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_0_xix_c() { bit = 0; x.w = R.IX.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_0_xix_d() { bit = 0; x.w = R.IX.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_0_xix_e() { bit = 0; x.w = R.IX.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_0_xix_h() { bit = 0; x.w = R.IX.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_0_xix_l() { bit = 0; x.w = R.IX.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_1_xix_a() { bit = 1; x.w = R.IX.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_1_xix_b() { bit = 1; x.w = R.IX.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_1_xix_c() { bit = 1; x.w = R.IX.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_1_xix_d() { bit = 1; x.w = R.IX.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_1_xix_e() { bit = 1; x.w = R.IX.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_1_xix_h() { bit = 1; x.w = R.IX.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_1_xix_l() { bit = 1; x.w = R.IX.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_2_xix_a() { bit = 2; x.w = R.IX.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_2_xix_b() { bit = 2; x.w = R.IX.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_2_xix_c() { bit = 2; x.w = R.IX.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_2_xix_d() { bit = 2; x.w = R.IX.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_2_xix_e() { bit = 2; x.w = R.IX.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_2_xix_h() { bit = 2; x.w = R.IX.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_2_xix_l() { bit = 2; x.w = R.IX.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_3_xix_a() { bit = 3; x.w = R.IX.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_3_xix_b() { bit = 3; x.w = R.IX.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_3_xix_c() { bit = 3; x.w = R.IX.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_3_xix_d() { bit = 3; x.w = R.IX.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_3_xix_e() { bit = 3; x.w = R.IX.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_3_xix_h() { bit = 3; x.w = R.IX.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_3_xix_l() { bit = 3; x.w = R.IX.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_4_xix_a() { bit = 4; x.w = R.IX.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_4_xix_b() { bit = 4; x.w = R.IX.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_4_xix_c() { bit = 4; x.w = R.IX.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_4_xix_d() { bit = 4; x.w = R.IX.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_4_xix_e() { bit = 4; x.w = R.IX.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_4_xix_h() { bit = 4; x.w = R.IX.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_4_xix_l() { bit = 4; x.w = R.IX.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_5_xix_a() { bit = 5; x.w = R.IX.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_5_xix_b() { bit = 5; x.w = R.IX.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_5_xix_c() { bit = 5; x.w = R.IX.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_5_xix_d() { bit = 5; x.w = R.IX.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_5_xix_e() { bit = 5; x.w = R.IX.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_5_xix_h() { bit = 5; x.w = R.IX.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_5_xix_l() { bit = 5; x.w = R.IX.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_6_xix_a() { bit = 6; x.w = R.IX.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_6_xix_b() { bit = 6; x.w = R.IX.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_6_xix_c() { bit = 6; x.w = R.IX.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_6_xix_d() { bit = 6; x.w = R.IX.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_6_xix_e() { bit = 6; x.w = R.IX.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_6_xix_h() { bit = 6; x.w = R.IX.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_6_xix_l() { bit = 6; x.w = R.IX.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_7_xix_a() { bit = 7; x.w = R.IX.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_7_xix_b() { bit = 7; x.w = R.IX.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_7_xix_c() { bit = 7; x.w = R.IX.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_7_xix_d() { bit = 7; x.w = R.IX.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_7_xix_e() { bit = 7; x.w = R.IX.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_7_xix_h() { bit = 7; x.w = R.IX.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_7_xix_l() { bit = 7; x.w = R.IX.w + ofst; p = &R.HL.B.l; SET_X(); }

void _CPU_::set_0_xiy_a() { bit = 0; x.w = R.IY.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_0_xiy_b() { bit = 0; x.w = R.IY.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_0_xiy_c() { bit = 0; x.w = R.IY.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_0_xiy_d() { bit = 0; x.w = R.IY.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_0_xiy_e() { bit = 0; x.w = R.IY.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_0_xiy_h() { bit = 0; x.w = R.IY.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_0_xiy_l() { bit = 0; x.w = R.IY.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_1_xiy_a() { bit = 1; x.w = R.IY.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_1_xiy_b() { bit = 1; x.w = R.IY.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_1_xiy_c() { bit = 1; x.w = R.IY.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_1_xiy_d() { bit = 1; x.w = R.IY.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_1_xiy_e() { bit = 1; x.w = R.IY.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_1_xiy_h() { bit = 1; x.w = R.IY.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_1_xiy_l() { bit = 1; x.w = R.IY.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_2_xiy_a() { bit = 2; x.w = R.IY.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_2_xiy_b() { bit = 2; x.w = R.IY.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_2_xiy_c() { bit = 2; x.w = R.IY.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_2_xiy_d() { bit = 2; x.w = R.IY.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_2_xiy_e() { bit = 2; x.w = R.IY.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_2_xiy_h() { bit = 2; x.w = R.IY.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_2_xiy_l() { bit = 2; x.w = R.IY.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_3_xiy_a() { bit = 3; x.w = R.IY.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_3_xiy_b() { bit = 3; x.w = R.IY.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_3_xiy_c() { bit = 3; x.w = R.IY.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_3_xiy_d() { bit = 3; x.w = R.IY.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_3_xiy_e() { bit = 3; x.w = R.IY.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_3_xiy_h() { bit = 3; x.w = R.IY.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_3_xiy_l() { bit = 3; x.w = R.IY.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_4_xiy_a() { bit = 4; x.w = R.IY.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_4_xiy_b() { bit = 4; x.w = R.IY.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_4_xiy_c() { bit = 4; x.w = R.IY.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_4_xiy_d() { bit = 4; x.w = R.IY.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_4_xiy_e() { bit = 4; x.w = R.IY.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_4_xiy_h() { bit = 4; x.w = R.IY.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_4_xiy_l() { bit = 4; x.w = R.IY.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_5_xiy_a() { bit = 5; x.w = R.IY.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_5_xiy_b() { bit = 5; x.w = R.IY.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_5_xiy_c() { bit = 5; x.w = R.IY.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_5_xiy_d() { bit = 5; x.w = R.IY.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_5_xiy_e() { bit = 5; x.w = R.IY.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_5_xiy_h() { bit = 5; x.w = R.IY.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_5_xiy_l() { bit = 5; x.w = R.IY.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_6_xiy_a() { bit = 6; x.w = R.IY.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_6_xiy_b() { bit = 6; x.w = R.IY.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_6_xiy_c() { bit = 6; x.w = R.IY.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_6_xiy_d() { bit = 6; x.w = R.IY.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_6_xiy_e() { bit = 6; x.w = R.IY.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_6_xiy_h() { bit = 6; x.w = R.IY.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_6_xiy_l() { bit = 6; x.w = R.IY.w + ofst; p = &R.HL.B.l; SET_X(); }
void _CPU_::set_7_xiy_a() { bit = 7; x.w = R.IY.w + ofst; p = &R.AF.B.h; SET_X(); }
void _CPU_::set_7_xiy_b() { bit = 7; x.w = R.IY.w + ofst; p = &R.BC.B.h; SET_X(); }
void _CPU_::set_7_xiy_c() { bit = 7; x.w = R.IY.w + ofst; p = &R.BC.B.l; SET_X(); }
void _CPU_::set_7_xiy_d() { bit = 7; x.w = R.IY.w + ofst; p = &R.DE.B.h; SET_X(); }
void _CPU_::set_7_xiy_e() { bit = 7; x.w = R.IY.w + ofst; p = &R.DE.B.l; SET_X(); }
void _CPU_::set_7_xiy_h() { bit = 7; x.w = R.IY.w + ofst; p = &R.HL.B.h; SET_X(); }
void _CPU_::set_7_xiy_l() { bit = 7; x.w = R.IY.w + ofst; p = &R.HL.B.l; SET_X(); }


// RL r
inline void _CPU_::RL(byte &reg) {
	byte c = reg >> 7;
	reg = (reg << 1) | ((R.AF.B.l & C_FLAG) ? 0x01 : 0);
	R.AF.B.l = ZSPXYTable[reg] | (c ? C_FLAG : 0);
}
void _CPU_::rl_a() { RL(R.AF.B.h); }
void _CPU_::rl_b() { RL(R.BC.B.h); }
void _CPU_::rl_c() { RL(R.BC.B.l); }
void _CPU_::rl_d() { RL(R.DE.B.h); }
void _CPU_::rl_e() { RL(R.DE.B.l); }
void _CPU_::rl_h() { RL(R.HL.B.h); }
void _CPU_::rl_l() { RL(R.HL.B.l); }

inline void _CPU_::RL_X1() {
	if (WRMEM(x.w, *p, &_CPU_::RL_X1)) {
	}
}
inline void _CPU_::RL_X() {
	if (RDMEM(x.w, *p, &_CPU_::RL_X)) {
		RL(*p); SMALL_DELAY(); RL_X1();
	}
}
void _CPU_::rl_xhl() { x.w = R.HL.w; p = &dummy; RL_X(); }

void _CPU_::rl_xix  () { x.w = R.IX.w + ofst; p = &dummy;    RL_X(); }
void _CPU_::rl_xix_a() { x.w = R.IX.w + ofst; p = &R.AF.B.h; RL_X(); }
void _CPU_::rl_xix_b() { x.w = R.IX.w + ofst; p = &R.BC.B.h; RL_X(); }
void _CPU_::rl_xix_c() { x.w = R.IX.w + ofst; p = &R.BC.B.l; RL_X(); }
void _CPU_::rl_xix_d() { x.w = R.IX.w + ofst; p = &R.DE.B.h; RL_X(); }
void _CPU_::rl_xix_e() { x.w = R.IX.w + ofst; p = &R.DE.B.l; RL_X(); }
void _CPU_::rl_xix_h() { x.w = R.IX.w + ofst; p = &R.HL.B.h; RL_X(); }
void _CPU_::rl_xix_l() { x.w = R.IX.w + ofst; p = &R.HL.B.l; RL_X(); }

void _CPU_::rl_xiy  () { x.w = R.IY.w + ofst; p = &dummy;    RL_X(); }
void _CPU_::rl_xiy_a() { x.w = R.IY.w + ofst; p = &R.AF.B.h; RL_X(); }
void _CPU_::rl_xiy_b() { x.w = R.IY.w + ofst; p = &R.BC.B.h; RL_X(); }
void _CPU_::rl_xiy_c() { x.w = R.IY.w + ofst; p = &R.BC.B.l; RL_X(); }
void _CPU_::rl_xiy_d() { x.w = R.IY.w + ofst; p = &R.DE.B.h; RL_X(); }
void _CPU_::rl_xiy_e() { x.w = R.IY.w + ofst; p = &R.DE.B.l; RL_X(); }
void _CPU_::rl_xiy_h() { x.w = R.IY.w + ofst; p = &R.HL.B.h; RL_X(); }
void _CPU_::rl_xiy_l() { x.w = R.IY.w + ofst; p = &R.HL.B.l; RL_X(); }


// RLC r
inline void _CPU_::RLC(byte &reg) {
	byte c = reg >> 7;
	reg = (reg << 1) | c;
	R.AF.B.l = ZSPXYTable[reg] | (c ? C_FLAG : 0);
}
void _CPU_::rlc_a() { RLC(R.AF.B.h); }
void _CPU_::rlc_b() { RLC(R.BC.B.h); }
void _CPU_::rlc_c() { RLC(R.BC.B.l); }
void _CPU_::rlc_d() { RLC(R.DE.B.h); }
void _CPU_::rlc_e() { RLC(R.DE.B.l); }
void _CPU_::rlc_h() { RLC(R.HL.B.h); }
void _CPU_::rlc_l() { RLC(R.HL.B.l); }

inline void _CPU_::RLC_X1() {
	if (WRMEM(x.w, *p, &_CPU_::RLC_X1)) {
	}
}
inline void _CPU_::RLC_X() {
	if (RDMEM(x.w, *p, &_CPU_::RLC_X)) {
		RLC(*p); SMALL_DELAY(); RLC_X1();
	}
}
void _CPU_::rlc_xhl() { x.w = R.HL.w; p = &dummy; RLC_X(); }

void _CPU_::rlc_xix  () { x.w = R.IX.w + ofst; p = &dummy;    RLC_X(); }
void _CPU_::rlc_xix_a() { x.w = R.IX.w + ofst; p = &R.AF.B.h; RLC_X(); }
void _CPU_::rlc_xix_b() { x.w = R.IX.w + ofst; p = &R.BC.B.h; RLC_X(); }
void _CPU_::rlc_xix_c() { x.w = R.IX.w + ofst; p = &R.BC.B.l; RLC_X(); }
void _CPU_::rlc_xix_d() { x.w = R.IX.w + ofst; p = &R.DE.B.h; RLC_X(); }
void _CPU_::rlc_xix_e() { x.w = R.IX.w + ofst; p = &R.DE.B.l; RLC_X(); }
void _CPU_::rlc_xix_h() { x.w = R.IX.w + ofst; p = &R.HL.B.h; RLC_X(); }
void _CPU_::rlc_xix_l() { x.w = R.IX.w + ofst; p = &R.HL.B.l; RLC_X(); }

void _CPU_::rlc_xiy  () { x.w = R.IY.w + ofst; p = &dummy;    RLC_X(); }
void _CPU_::rlc_xiy_a() { x.w = R.IY.w + ofst; p = &R.AF.B.h; RLC_X(); }
void _CPU_::rlc_xiy_b() { x.w = R.IY.w + ofst; p = &R.BC.B.h; RLC_X(); }
void _CPU_::rlc_xiy_c() { x.w = R.IY.w + ofst; p = &R.BC.B.l; RLC_X(); }
void _CPU_::rlc_xiy_d() { x.w = R.IY.w + ofst; p = &R.DE.B.h; RLC_X(); }
void _CPU_::rlc_xiy_e() { x.w = R.IY.w + ofst; p = &R.DE.B.l; RLC_X(); }
void _CPU_::rlc_xiy_h() { x.w = R.IY.w + ofst; p = &R.HL.B.h; RLC_X(); }
void _CPU_::rlc_xiy_l() { x.w = R.IY.w + ofst; p = &R.HL.B.l; RLC_X(); }


// RR r
inline void _CPU_::RR(byte &reg) {
	byte c = reg & 1;
	reg = (reg >> 1) | ((R.AF.B.l & C_FLAG) ? 0x80 : 0);
	R.AF.B.l = ZSPXYTable[reg] | (c ? C_FLAG : 0);
}
void _CPU_::rr_a() { RR(R.AF.B.h); }
void _CPU_::rr_b() { RR(R.BC.B.h); }
void _CPU_::rr_c() { RR(R.BC.B.l); }
void _CPU_::rr_d() { RR(R.DE.B.h); }
void _CPU_::rr_e() { RR(R.DE.B.l); }
void _CPU_::rr_h() { RR(R.HL.B.h); }
void _CPU_::rr_l() { RR(R.HL.B.l); }

inline void _CPU_::RR_X1() {
	if (WRMEM(x.w, *p, &_CPU_::RR_X1)) {
	}
}
inline void _CPU_::RR_X() {
	if (RDMEM(x.w, *p, &_CPU_::RR_X)) {
		RR(*p); SMALL_DELAY(); RR_X1();
	}
}
void _CPU_::rr_xhl() { x.w = R.HL.w; p = &dummy; RR_X(); }

void _CPU_::rr_xix  () { x.w = R.IX.w + ofst; p = &dummy;    RR_X(); }
void _CPU_::rr_xix_a() { x.w = R.IX.w + ofst; p = &R.AF.B.h; RR_X(); }
void _CPU_::rr_xix_b() { x.w = R.IX.w + ofst; p = &R.BC.B.h; RR_X(); }
void _CPU_::rr_xix_c() { x.w = R.IX.w + ofst; p = &R.BC.B.l; RR_X(); }
void _CPU_::rr_xix_d() { x.w = R.IX.w + ofst; p = &R.DE.B.h; RR_X(); }
void _CPU_::rr_xix_e() { x.w = R.IX.w + ofst; p = &R.DE.B.l; RR_X(); }
void _CPU_::rr_xix_h() { x.w = R.IX.w + ofst; p = &R.HL.B.h; RR_X(); }
void _CPU_::rr_xix_l() { x.w = R.IX.w + ofst; p = &R.HL.B.l; RR_X(); }

void _CPU_::rr_xiy  () { x.w = R.IY.w + ofst; p = &dummy;    RR_X(); }
void _CPU_::rr_xiy_a() { x.w = R.IY.w + ofst; p = &R.AF.B.h; RR_X(); }
void _CPU_::rr_xiy_b() { x.w = R.IY.w + ofst; p = &R.BC.B.h; RR_X(); }
void _CPU_::rr_xiy_c() { x.w = R.IY.w + ofst; p = &R.BC.B.l; RR_X(); }
void _CPU_::rr_xiy_d() { x.w = R.IY.w + ofst; p = &R.DE.B.h; RR_X(); }
void _CPU_::rr_xiy_e() { x.w = R.IY.w + ofst; p = &R.DE.B.l; RR_X(); }
void _CPU_::rr_xiy_h() { x.w = R.IY.w + ofst; p = &R.HL.B.h; RR_X(); }
void _CPU_::rr_xiy_l() { x.w = R.IY.w + ofst; p = &R.HL.B.l; RR_X(); }


// RRC r
inline void _CPU_::RRC(byte &reg) {
	byte c = reg & 1;
	reg = (reg >> 1) | (c << 7);
	R.AF.B.l = ZSPXYTable[reg] | (c ? C_FLAG : 0);
}
void _CPU_::rrc_a() { RRC(R.AF.B.h); }
void _CPU_::rrc_b() { RRC(R.BC.B.h); }
void _CPU_::rrc_c() { RRC(R.BC.B.l); }
void _CPU_::rrc_d() { RRC(R.DE.B.h); }
void _CPU_::rrc_e() { RRC(R.DE.B.l); }
void _CPU_::rrc_h() { RRC(R.HL.B.h); }
void _CPU_::rrc_l() { RRC(R.HL.B.l); }

inline void _CPU_::RRC_X1() {
	if (WRMEM(x.w, *p, &_CPU_::RRC_X1)) {
	}
}
inline void _CPU_::RRC_X() {
	if (RDMEM(x.w, *p, &_CPU_::RRC_X)) {
		RRC(*p); SMALL_DELAY(); RRC_X1();
	}
}
void _CPU_::rrc_xhl() { x.w = R.HL.w; p = &dummy; RRC_X(); }

void _CPU_::rrc_xix  () { x.w = R.IX.w + ofst; p = &dummy;    RRC_X(); }
void _CPU_::rrc_xix_a() { x.w = R.IX.w + ofst; p = &R.AF.B.h; RRC_X(); }
void _CPU_::rrc_xix_b() { x.w = R.IX.w + ofst; p = &R.BC.B.h; RRC_X(); }
void _CPU_::rrc_xix_c() { x.w = R.IX.w + ofst; p = &R.BC.B.l; RRC_X(); }
void _CPU_::rrc_xix_d() { x.w = R.IX.w + ofst; p = &R.DE.B.h; RRC_X(); }
void _CPU_::rrc_xix_e() { x.w = R.IX.w + ofst; p = &R.DE.B.l; RRC_X(); }
void _CPU_::rrc_xix_h() { x.w = R.IX.w + ofst; p = &R.HL.B.h; RRC_X(); }
void _CPU_::rrc_xix_l() { x.w = R.IX.w + ofst; p = &R.HL.B.l; RRC_X(); }

void _CPU_::rrc_xiy  () { x.w = R.IY.w + ofst; p = &dummy;    RRC_X(); }
void _CPU_::rrc_xiy_a() { x.w = R.IY.w + ofst; p = &R.AF.B.h; RRC_X(); }
void _CPU_::rrc_xiy_b() { x.w = R.IY.w + ofst; p = &R.BC.B.h; RRC_X(); }
void _CPU_::rrc_xiy_c() { x.w = R.IY.w + ofst; p = &R.BC.B.l; RRC_X(); }
void _CPU_::rrc_xiy_d() { x.w = R.IY.w + ofst; p = &R.DE.B.h; RRC_X(); }
void _CPU_::rrc_xiy_e() { x.w = R.IY.w + ofst; p = &R.DE.B.l; RRC_X(); }
void _CPU_::rrc_xiy_h() { x.w = R.IY.w + ofst; p = &R.HL.B.h; RRC_X(); }
void _CPU_::rrc_xiy_l() { x.w = R.IY.w + ofst; p = &R.HL.B.l; RRC_X(); }


// SLA r
inline void _CPU_::SLA(byte &reg) {
	byte c = reg >> 7;
	reg <<= 1;
	R.AF.B.l = ZSPXYTable[reg] | (c ? C_FLAG : 0);
}
void _CPU_::sla_a() { SLA(R.AF.B.h); }
void _CPU_::sla_b() { SLA(R.BC.B.h); }
void _CPU_::sla_c() { SLA(R.BC.B.l); }
void _CPU_::sla_d() { SLA(R.DE.B.h); }
void _CPU_::sla_e() { SLA(R.DE.B.l); }
void _CPU_::sla_h() { SLA(R.HL.B.h); }
void _CPU_::sla_l() { SLA(R.HL.B.l); }

inline void _CPU_::SLA_X1() {
	if (WRMEM(x.w, *p, &_CPU_::SLA_X1)) {
	}
}
inline void _CPU_::SLA_X() {
	if (RDMEM(x.w, *p, &_CPU_::SLA_X)) {
		SLA(*p); SMALL_DELAY(); SLA_X1();
	}
}
void _CPU_::sla_xhl() { x.w = R.HL.w; p = &dummy; SLA_X(); }

void _CPU_::sla_xix  () { x.w = R.IX.w + ofst; p = &dummy;    SLA_X(); }
void _CPU_::sla_xix_a() { x.w = R.IX.w + ofst; p = &R.AF.B.h; SLA_X(); }
void _CPU_::sla_xix_b() { x.w = R.IX.w + ofst; p = &R.BC.B.h; SLA_X(); }
void _CPU_::sla_xix_c() { x.w = R.IX.w + ofst; p = &R.BC.B.l; SLA_X(); }
void _CPU_::sla_xix_d() { x.w = R.IX.w + ofst; p = &R.DE.B.h; SLA_X(); }
void _CPU_::sla_xix_e() { x.w = R.IX.w + ofst; p = &R.DE.B.l; SLA_X(); }
void _CPU_::sla_xix_h() { x.w = R.IX.w + ofst; p = &R.HL.B.h; SLA_X(); }
void _CPU_::sla_xix_l() { x.w = R.IX.w + ofst; p = &R.HL.B.l; SLA_X(); }

void _CPU_::sla_xiy  () { x.w = R.IY.w + ofst; p = &dummy;    SLA_X(); }
void _CPU_::sla_xiy_a() { x.w = R.IY.w + ofst; p = &R.AF.B.h; SLA_X(); }
void _CPU_::sla_xiy_b() { x.w = R.IY.w + ofst; p = &R.BC.B.h; SLA_X(); }
void _CPU_::sla_xiy_c() { x.w = R.IY.w + ofst; p = &R.BC.B.l; SLA_X(); }
void _CPU_::sla_xiy_d() { x.w = R.IY.w + ofst; p = &R.DE.B.h; SLA_X(); }
void _CPU_::sla_xiy_e() { x.w = R.IY.w + ofst; p = &R.DE.B.l; SLA_X(); }
void _CPU_::sla_xiy_h() { x.w = R.IY.w + ofst; p = &R.HL.B.h; SLA_X(); }
void _CPU_::sla_xiy_l() { x.w = R.IY.w + ofst; p = &R.HL.B.l; SLA_X(); }


// SLL r
inline void _CPU_::SLL(byte &reg) {
	byte c = reg >> 7;
	reg = (reg << 1) | 1;
	R.AF.B.l = ZSPXYTable[reg] | (c ? C_FLAG : 0);
}
void _CPU_::sll_a() { SLL(R.AF.B.h); }
void _CPU_::sll_b() { SLL(R.BC.B.h); }
void _CPU_::sll_c() { SLL(R.BC.B.l); }
void _CPU_::sll_d() { SLL(R.DE.B.h); }
void _CPU_::sll_e() { SLL(R.DE.B.l); }
void _CPU_::sll_h() { SLL(R.HL.B.h); }
void _CPU_::sll_l() { SLL(R.HL.B.l); }

inline void _CPU_::SLL_X1() {
	if (WRMEM(x.w, *p, &_CPU_::SLL_X1)) {
	}
}
inline void _CPU_::SLL_X() {
	if (RDMEM(x.w, *p, &_CPU_::SLL_X)) {
		SLL(*p); SMALL_DELAY(); SLL_X1();
	}
}
void _CPU_::sll_xhl() { x.w = R.HL.w; p = &dummy; SLL_X(); }

void _CPU_::sll_xix  () { x.w = R.IX.w + ofst; p = &dummy;    SLL_X(); }
void _CPU_::sll_xix_a() { x.w = R.IX.w + ofst; p = &R.AF.B.h; SLL_X(); }
void _CPU_::sll_xix_b() { x.w = R.IX.w + ofst; p = &R.BC.B.h; SLL_X(); }
void _CPU_::sll_xix_c() { x.w = R.IX.w + ofst; p = &R.BC.B.l; SLL_X(); }
void _CPU_::sll_xix_d() { x.w = R.IX.w + ofst; p = &R.DE.B.h; SLL_X(); }
void _CPU_::sll_xix_e() { x.w = R.IX.w + ofst; p = &R.DE.B.l; SLL_X(); }
void _CPU_::sll_xix_h() { x.w = R.IX.w + ofst; p = &R.HL.B.h; SLL_X(); }
void _CPU_::sll_xix_l() { x.w = R.IX.w + ofst; p = &R.HL.B.l; SLL_X(); }

void _CPU_::sll_xiy  () { x.w = R.IY.w + ofst; p = &dummy;    SLL_X(); }
void _CPU_::sll_xiy_a() { x.w = R.IY.w + ofst; p = &R.AF.B.h; SLL_X(); }
void _CPU_::sll_xiy_b() { x.w = R.IY.w + ofst; p = &R.BC.B.h; SLL_X(); }
void _CPU_::sll_xiy_c() { x.w = R.IY.w + ofst; p = &R.BC.B.l; SLL_X(); }
void _CPU_::sll_xiy_d() { x.w = R.IY.w + ofst; p = &R.DE.B.h; SLL_X(); }
void _CPU_::sll_xiy_e() { x.w = R.IY.w + ofst; p = &R.DE.B.l; SLL_X(); }
void _CPU_::sll_xiy_h() { x.w = R.IY.w + ofst; p = &R.HL.B.h; SLL_X(); }
void _CPU_::sll_xiy_l() { x.w = R.IY.w + ofst; p = &R.HL.B.l; SLL_X(); }


// SRA r
inline void _CPU_::SRA(byte &reg) {
	byte c = reg & 1;
	reg = (reg >> 1) | (reg & 0x80);
	R.AF.B.l = ZSPXYTable[reg] | (c ? C_FLAG : 0);
}
void _CPU_::sra_a() { SRA(R.AF.B.h); }
void _CPU_::sra_b() { SRA(R.BC.B.h); }
void _CPU_::sra_c() { SRA(R.BC.B.l); }
void _CPU_::sra_d() { SRA(R.DE.B.h); }
void _CPU_::sra_e() { SRA(R.DE.B.l); }
void _CPU_::sra_h() { SRA(R.HL.B.h); }
void _CPU_::sra_l() { SRA(R.HL.B.l); }

inline void _CPU_::SRA_X1() {
	if (WRMEM(x.w, *p, &_CPU_::SRA_X1)) {
	}
}
inline void _CPU_::SRA_X() {
	if (RDMEM(x.w, *p, &_CPU_::SRA_X)) {
		SRA(*p); SMALL_DELAY(); SRA_X1();
	}
}
void _CPU_::sra_xhl() { x.w = R.HL.w; p = &dummy; SRA_X(); }

void _CPU_::sra_xix  () { x.w = R.IX.w + ofst; p = &dummy;    SRA_X(); }
void _CPU_::sra_xix_a() { x.w = R.IX.w + ofst; p = &R.AF.B.h; SRA_X(); }
void _CPU_::sra_xix_b() { x.w = R.IX.w + ofst; p = &R.BC.B.h; SRA_X(); }
void _CPU_::sra_xix_c() { x.w = R.IX.w + ofst; p = &R.BC.B.l; SRA_X(); }
void _CPU_::sra_xix_d() { x.w = R.IX.w + ofst; p = &R.DE.B.h; SRA_X(); }
void _CPU_::sra_xix_e() { x.w = R.IX.w + ofst; p = &R.DE.B.l; SRA_X(); }
void _CPU_::sra_xix_h() { x.w = R.IX.w + ofst; p = &R.HL.B.h; SRA_X(); }
void _CPU_::sra_xix_l() { x.w = R.IX.w + ofst; p = &R.HL.B.l; SRA_X(); }

void _CPU_::sra_xiy  () { x.w = R.IY.w + ofst; p = &dummy;    SRA_X(); }
void _CPU_::sra_xiy_a() { x.w = R.IY.w + ofst; p = &R.AF.B.h; SRA_X(); }
void _CPU_::sra_xiy_b() { x.w = R.IY.w + ofst; p = &R.BC.B.h; SRA_X(); }
void _CPU_::sra_xiy_c() { x.w = R.IY.w + ofst; p = &R.BC.B.l; SRA_X(); }
void _CPU_::sra_xiy_d() { x.w = R.IY.w + ofst; p = &R.DE.B.h; SRA_X(); }
void _CPU_::sra_xiy_e() { x.w = R.IY.w + ofst; p = &R.DE.B.l; SRA_X(); }
void _CPU_::sra_xiy_h() { x.w = R.IY.w + ofst; p = &R.HL.B.h; SRA_X(); }
void _CPU_::sra_xiy_l() { x.w = R.IY.w + ofst; p = &R.HL.B.l; SRA_X(); }


// SRL R
inline void _CPU_::SRL(byte &reg) {
	byte c = reg & 1;
	reg >>= 1;
	R.AF.B.l = ZSPXYTable[reg] | (c ? C_FLAG : 0);
}
void _CPU_::srl_a() { SRL(R.AF.B.h); }
void _CPU_::srl_b() { SRL(R.BC.B.h); }
void _CPU_::srl_c() { SRL(R.BC.B.l); }
void _CPU_::srl_d() { SRL(R.DE.B.h); }
void _CPU_::srl_e() { SRL(R.DE.B.l); }
void _CPU_::srl_h() { SRL(R.HL.B.h); }
void _CPU_::srl_l() { SRL(R.HL.B.l); }

inline void _CPU_::SRL_X1() {
	if (WRMEM(x.w, *p, &_CPU_::SRL_X1)) {
	}
}
inline void _CPU_::SRL_X() {
	if (RDMEM(x.w, *p, &_CPU_::SRL_X)) {
		SRL(*p); SMALL_DELAY(); SRL_X1();
	}
}
void _CPU_::srl_xhl() { x.w = R.HL.w; p = &dummy; SRL_X(); }

void _CPU_::srl_xix  () { x.w = R.IX.w + ofst; p = &dummy;    SRL_X(); }
void _CPU_::srl_xix_a() { x.w = R.IX.w + ofst; p = &R.AF.B.h; SRL_X(); }
void _CPU_::srl_xix_b() { x.w = R.IX.w + ofst; p = &R.BC.B.h; SRL_X(); }
void _CPU_::srl_xix_c() { x.w = R.IX.w + ofst; p = &R.BC.B.l; SRL_X(); }
void _CPU_::srl_xix_d() { x.w = R.IX.w + ofst; p = &R.DE.B.h; SRL_X(); }
void _CPU_::srl_xix_e() { x.w = R.IX.w + ofst; p = &R.DE.B.l; SRL_X(); }
void _CPU_::srl_xix_h() { x.w = R.IX.w + ofst; p = &R.HL.B.h; SRL_X(); }
void _CPU_::srl_xix_l() { x.w = R.IX.w + ofst; p = &R.HL.B.l; SRL_X(); }

void _CPU_::srl_xiy  () { x.w = R.IY.w + ofst; p = &dummy;    SRL_X(); }
void _CPU_::srl_xiy_a() { x.w = R.IY.w + ofst; p = &R.AF.B.h; SRL_X(); }
void _CPU_::srl_xiy_b() { x.w = R.IY.w + ofst; p = &R.BC.B.h; SRL_X(); }
void _CPU_::srl_xiy_c() { x.w = R.IY.w + ofst; p = &R.BC.B.l; SRL_X(); }
void _CPU_::srl_xiy_d() { x.w = R.IY.w + ofst; p = &R.DE.B.h; SRL_X(); }
void _CPU_::srl_xiy_e() { x.w = R.IY.w + ofst; p = &R.DE.B.l; SRL_X(); }
void _CPU_::srl_xiy_h() { x.w = R.IY.w + ofst; p = &R.HL.B.h; SRL_X(); }
void _CPU_::srl_xiy_l() { x.w = R.IY.w + ofst; p = &R.HL.B.l; SRL_X(); }


// RLA RLCA RRA RRCA
void _CPU_::rla()  {
	byte c = R.AF.B.l & C_FLAG;
	R.AF.B.l = (R.AF.B.l & (S_FLAG | Z_FLAG | P_FLAG)) |
	           ((R.AF.B.h & 0x80) ? C_FLAG : 0);
	R.AF.B.h = (R.AF.B.h << 1) | (c ? 1 : 0);
	R.AF.B.l |= R.AF.B.h & (X_FLAG | Y_FLAG);
}
void _CPU_::rlca()  {
	R.AF.B.h = (R.AF.B.h << 1) | (R.AF.B.h >> 7);
	R.AF.B.l = (R.AF.B.l & (S_FLAG | Z_FLAG | P_FLAG)) |
	           (R.AF.B.h & (Y_FLAG | X_FLAG | C_FLAG));
}
void _CPU_::rra()  {
	byte c = R.AF.B.l & C_FLAG;
	R.AF.B.l = (R.AF.B.l & (S_FLAG | Z_FLAG | P_FLAG)) |
	           ((R.AF.B.h & 0x01) ? C_FLAG : 0);
	R.AF.B.h = (R.AF.B.h >> 1) | (c ? 0x80 : 0);
	R.AF.B.l |= R.AF.B.h & (X_FLAG | Y_FLAG);
}
void _CPU_::rrca()  {
	R.AF.B.l = (R.AF.B.l & (S_FLAG | Z_FLAG | P_FLAG)) |
	           (R.AF.B.h &  C_FLAG);
	R.AF.B.h = (R.AF.B.h >> 1) | (R.AF.B.h << 7);
	R.AF.B.l |= R.AF.B.h & (X_FLAG | Y_FLAG);
}


// RLD
void _CPU_::rld1() {
	if (WRMEM(R.HL.w, (dummy << 4) | (R.AF.B.h & 0x0F), &_CPU_::rld1)) {
		R.AF.B.h = (R.AF.B.h & 0xF0) | (dummy >> 4);
		R.AF.B.l = (R.AF.B.l & C_FLAG) | ZSPXYTable[R.AF.B.h];
	}
}
void _CPU_::rld() {
	if (RDMEM(R.HL.w, dummy, &_CPU_::rld)) {
		RLD_DELAY(); rld1();
	}
}

// RRD
void _CPU_::rrd1() {
	if (WRMEM(R.HL.w, (dummy >> 4) | (R.AF.B.h << 4), &_CPU_::rrd1)) {
		R.AF.B.h = (R.AF.B.h & 0xF0) | (dummy & 0x0F);
		R.AF.B.l = (R.AF.B.l & C_FLAG) | ZSPXYTable[R.AF.B.h];
	}
}
void _CPU_::rrd() {
	if (RDMEM(R.HL.w, dummy, &_CPU_::rrd)) {
		RLD_DELAY(); rrd1();
	}
}


// PUSH ss
inline void _CPU_::PUSH2() {
	if (WRMEM(R.SP.w, x.B.l, &_CPU_::PUSH2)) {
	}
}
inline void _CPU_::PUSH1() {
	if (WRMEM(R.SP.w, x.B.h, &_CPU_::PUSH1)) {
		R.SP.w--; PUSH2();
	}
}
inline void _CPU_::PUSH() {
	SMALL_DELAY(); R.SP.w--; PUSH1();
}
void _CPU_::push_af() { x.w = R.AF.w; PUSH(); }
void _CPU_::push_bc() { x.w = R.BC.w; PUSH(); }
void _CPU_::push_de() { x.w = R.DE.w; PUSH(); }
void _CPU_::push_hl() { x.w = R.HL.w; PUSH(); }
void _CPU_::push_ix() { x.w = R.IX.w; PUSH(); }
void _CPU_::push_iy() { x.w = R.IY.w; PUSH(); }


// POP ss
inline void _CPU_::POP1() {
	if (RDMEM(R.SP.w, *p, &_CPU_::POP1)) {
		R.SP.w++;
	}
}
inline void _CPU_::POP() { 
	if (RDMEM(R.SP.w, *p, &_CPU_::POP)) {
		R.SP.w++; pLowToHigh(); POP1();
	}
}
void _CPU_::pop_af() { p = &R.AF.B.l; POP(); }
void _CPU_::pop_bc() { p = &R.BC.B.l; POP(); }
void _CPU_::pop_de() { p = &R.DE.B.l; POP(); }
void _CPU_::pop_hl() { p = &R.HL.B.l; POP(); }
void _CPU_::pop_ix() { p = &R.IX.B.l; POP(); }
void _CPU_::pop_iy() { p = &R.IY.B.l; POP(); }


// CALL nn / CALL cc,nn
inline void _CPU_::CALL1() {
	if (RDMEM(R.PC.w, y.B.h, &_CPU_::CALL1)) {
		x.w = R.PC.w + 1;
		R.PC.w = y.w;
		PUSH();
	}
}
inline void _CPU_::CALL() {
	if (RDMEM(R.PC.w, y.B.l, &_CPU_::CALL)) {
		R.PC.w++;
		CALL1();
	}
}
inline void _CPU_::SKIP_ONE() {
	if (RDMEM(R.PC.w, dummy, &_CPU_::SKIP_ONE)) {
		R.PC.w++;
	}
}
inline void _CPU_::SKIP_TWO() {
	if (RDMEM(R.PC.w, dummy, &_CPU_::SKIP_TWO)) {
		R.PC.w++;
		SKIP_ONE();
	}
}
void _CPU_::call()    { CALL(); }
void _CPU_::call_c()  { if (C())  CALL(); else SKIP_TWO(); }
void _CPU_::call_m()  { if (M())  CALL(); else SKIP_TWO(); }
void _CPU_::call_nc() { if (NC()) CALL(); else SKIP_TWO(); }
void _CPU_::call_nz() { if (NZ()) CALL(); else SKIP_TWO(); }
void _CPU_::call_p()  { if (P())  CALL(); else SKIP_TWO(); }
void _CPU_::call_pe() { if (PE()) CALL(); else SKIP_TWO(); }
void _CPU_::call_po() { if (PO()) CALL(); else SKIP_TWO(); }
void _CPU_::call_z()  { if (Z())  CALL(); else SKIP_TWO(); }


// RST n
void _CPU_::rst_00() { x.w = R.PC.w; R.PC.w = 0x00; PUSH(); }
void _CPU_::rst_08() { x.w = R.PC.w; R.PC.w = 0x08; PUSH(); }
void _CPU_::rst_10() { x.w = R.PC.w; R.PC.w = 0x10; PUSH(); }
void _CPU_::rst_18() { x.w = R.PC.w; R.PC.w = 0x18; PUSH(); }
void _CPU_::rst_20() { x.w = R.PC.w; R.PC.w = 0x20; PUSH(); }
void _CPU_::rst_28() { x.w = R.PC.w; R.PC.w = 0x28; PUSH(); }
void _CPU_::rst_30() { x.w = R.PC.w; R.PC.w = 0x30; PUSH(); }
void _CPU_::rst_38() { x.w = R.PC.w; R.PC.w = 0x38; PUSH(); }


// RET
inline void _CPU_::RET() { p = &R.PC.B.l; POP(); }
void _CPU_::ret()    { RET(); }
void _CPU_::ret_c()  { SMALL_DELAY(); if (C())  RET(); }
void _CPU_::ret_m()  { SMALL_DELAY(); if (M())  RET(); }
void _CPU_::ret_nc() { SMALL_DELAY(); if (NC()) RET(); }
void _CPU_::ret_nz() { SMALL_DELAY(); if (NZ()) RET(); }
void _CPU_::ret_p()  { SMALL_DELAY(); if (P())  RET(); }
void _CPU_::ret_pe() { SMALL_DELAY(); if (PE()) RET(); }
void _CPU_::ret_po() { SMALL_DELAY(); if (PO()) RET(); }
void _CPU_::ret_z()  { SMALL_DELAY(); if (Z())  RET(); }

void _CPU_::reti() { // same as retn
	R.IFF1 = R.nextIFF1 = R.IFF2;
	interface->reti(R);
	slowInstructions = 2;
	RET();
}
void _CPU_::retn() {
	R.IFF1 = R.nextIFF1 = R.IFF2;
	interface->retn(R);
	slowInstructions = 2;
	RET(); 
}


// JP ss
void _CPU_::jp_hl() { R.PC.w = R.HL.w; }
void _CPU_::jp_ix() { R.PC.w = R.IX.w; }
void _CPU_::jp_iy() { R.PC.w = R.IY.w; }

// JP nn / JP cc,nn
inline void _CPU_::JP() {
	if (RDMEM(R.PC.w, y.B.l, &_CPU_::JP)) {
		R.PC.w++;
		JP1();
	}
}
inline void _CPU_::JP1() {
	if (RDMEM(R.PC.w, y.B.h, &_CPU_::JP1)) {
		R.PC.w = y.w;
	}
}
void _CPU_::jp()    { JP(); }
void _CPU_::jp_c()  { if (C())  JP(); else SKIP_TWO(); }
void _CPU_::jp_m()  { if (M())  JP(); else SKIP_TWO(); }
void _CPU_::jp_nc() { if (NC()) JP(); else SKIP_TWO(); }
void _CPU_::jp_nz() { if (NZ()) JP(); else SKIP_TWO(); }
void _CPU_::jp_p()  { if (P())  JP(); else SKIP_TWO(); }
void _CPU_::jp_pe() { if (PE()) JP(); else SKIP_TWO(); }
void _CPU_::jp_po() { if (PO()) JP(); else SKIP_TWO(); }
void _CPU_::jp_z()  { if (Z())  JP(); else SKIP_TWO(); }

// JR e
inline void _CPU_::JR() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::JR)) {
		R.PC.w++;
		R.PC.w += ofst;
		ADD_16_8_DELAY();
	}
}
void _CPU_::jr()    { JR(); }
void _CPU_::jr_c()  { if (C())  JR(); else SKIP_ONE(); }
void _CPU_::jr_nc() { if (NC()) JR(); else SKIP_ONE(); }
void _CPU_::jr_nz() { if (NZ()) JR(); else SKIP_ONE(); }
void _CPU_::jr_z()  { if (Z())  JR(); else SKIP_ONE(); }

// DJNZ e
void _CPU_::djnz() {
	SMALL_DELAY();
	if (--R.BC.B.h) JR(); else SKIP_ONE();
}

// EX (SP),ss
void _CPU_::EX_SP3() {
	if (WRMEM(R.SP.w, *p, &_CPU_::EX_SP3)) {
		*p = y.B.l;
		EX_SP_HL_DELAY();
	}
}
inline void _CPU_::EX_SP2() {
	if (WRMEM(R.SP.w, *p, &_CPU_::EX_SP2)) {
		R.SP.w--;
		*p = y.B.h; pHighToLow();
		EX_SP3();
	}
}
inline void _CPU_::EX_SP1() {
	if (RDMEM(R.SP.w, y.B.h, &_CPU_::EX_SP1)) {
		EX_SP2();
	}
}
inline void _CPU_::EX_SP() {
	if (RDMEM(R.SP.w, y.B.l, &_CPU_::EX_SP)) {
		R.SP.w++;
		EX_SP1();
	}
}
void _CPU_::ex_xsp_hl() { p = &R.HL.B.h; EX_SP(); }
void _CPU_::ex_xsp_ix() { p = &R.IX.B.h; EX_SP(); }
void _CPU_::ex_xsp_iy() { p = &R.IY.B.h; EX_SP(); }


// IN r,(c)
inline void _CPU_::IN() {
	if (READ_PORT(R.BC.w, *p, &_CPU_::IN)) {
		R.AF.B.l = (R.AF.B.l & C_FLAG) |
		           ZSPXYTable[*p];
	}
}
void _CPU_::in_a_c() { p = &R.AF.B.h; IN(); }
void _CPU_::in_b_c() { p = &R.BC.B.h; IN(); }
void _CPU_::in_c_c() { p = &R.BC.B.l; IN(); }
void _CPU_::in_d_c() { p = &R.DE.B.h; IN(); }
void _CPU_::in_e_c() { p = &R.DE.B.l; IN(); }
void _CPU_::in_h_c() { p = &R.HL.B.h; IN(); }
void _CPU_::in_l_c() { p = &R.HL.B.l; IN(); }
void _CPU_::in_0_c() { p = &dummy;    IN(); } // discard result

// IN a,(n)
void _CPU_::in_a_byte1() {
	if (READ_PORT(y.w, R.AF.B.h, &_CPU_::in_a_byte1)) {
	}
}
void _CPU_::in_a_byte() {
	if (RDMEM(R.PC.w, y.B.l, &_CPU_::in_a_byte)) {
		R.PC.w++; y.B.h = R.AF.B.h; in_a_byte1();
	}
}


// OUT (c),r
inline void _CPU_::OUT() {
	if (WRITE_PORT(R.BC.w, dummy, &_CPU_::OUT)) {
	}
}
void _CPU_::out_c_a()   { dummy = R.AF.B.h; OUT(); }
void _CPU_::out_c_b()   { dummy = R.BC.B.h; OUT(); }
void _CPU_::out_c_c()   { dummy = R.BC.B.l; OUT(); }
void _CPU_::out_c_d()   { dummy = R.DE.B.h; OUT(); }
void _CPU_::out_c_e()   { dummy = R.DE.B.l; OUT(); }
void _CPU_::out_c_h()   { dummy = R.HL.B.h; OUT(); }
void _CPU_::out_c_l()   { dummy = R.HL.B.l; OUT(); }
void _CPU_::out_c_0()   { dummy = 0;        OUT(); }

// OUT (n),a
void _CPU_::out_byte_a1() {
	if (WRITE_PORT(y.w, R.AF.B.h, &_CPU_::out_byte_a1)) {
	}
}
void _CPU_::out_byte_a() {
	if (RDMEM(R.PC.w, y.B.l, &_CPU_::out_byte_a)) {
		R.PC.w++; y.B.h = R.AF.B.h; out_byte_a1();
	}
}


// block CP
inline void _CPU_::BLOCK_CP() {
	byte val;
	if (RDMEM(R.HL.w, val, &_CPU_::BLOCK_CP)) {
		BLOCK_DELAY();
		byte res = R.AF.B.h - val;
		if (increase) R.HL.w++; else R.HL.w--; 
		R.BC.w--;
		R.AF.B.l = (R.AF.B.l & C_FLAG) |
			   ((R.AF.B.h ^ val ^ res) & H_FLAG) |
			   ZSTable[res] |
			   N_FLAG;
		if (R.AF.B.l & H_FLAG) res -= 1;
		if (res & 0x02) R.AF.B.l |= Y_FLAG; // bit 1 -> flag 5
		if (res & 0x08) R.AF.B.l |= X_FLAG; // bit 3 -> flag 3
		if (R.BC.w)     R.AF.B.l |= V_FLAG;
		if (repeat && R.BC.w && !(R.AF.B.l & Z_FLAG)) {
			BLOCK_DELAY(); R.PC.w -= 2;
		}
	}
}
void _CPU_::cpd() {
	repeat = false; increase = false; BLOCK_CP();
}
void _CPU_::cpi() {
	repeat = false; increase = true;  BLOCK_CP();
}
void _CPU_::cpdr() {
	repeat = true;  increase = false; BLOCK_CP();
}
void _CPU_::cpir() {
	repeat = true;  increase = true;  BLOCK_CP();
}


// block LD
inline void _CPU_::BLOCK_LD1() {
	if (WRMEM(R.DE.w, dummy, &_CPU_::BLOCK_LD1)) {       
		LDI_DELAY();
		R.AF.B.l &= S_FLAG | Z_FLAG | C_FLAG;
		if ((R.AF.B.h + dummy) & 0x02) R.AF.B.l |= Y_FLAG;	// bit 1 -> flag 5
		if ((R.AF.B.h + dummy) & 0x08) R.AF.B.l |= X_FLAG;	// bit 3 -> flag 3
		if (increase) { R.HL.w++; R.DE.w++; } else { R.HL.w--; R.DE.w--; }
		R.BC.w--;
		if (R.BC.w) R.AF.B.l |= V_FLAG;
		if (repeat && R.BC.w) { BLOCK_DELAY(); R.PC.w -= 2; }
	}
}
inline void _CPU_::BLOCK_LD() {
	if (RDMEM(R.HL.w, dummy, &_CPU_::BLOCK_LD)) {
		BLOCK_LD1();
	}
}
void _CPU_::ldd() {
	repeat = false; increase = false; BLOCK_LD();
}
void _CPU_::ldi() {
	repeat = false; increase = true;  BLOCK_LD();
}
void _CPU_::lddr() {
	repeat = true;  increase = false; BLOCK_LD();
}
void _CPU_::ldir() {
	repeat = true;  increase = true;  BLOCK_LD();
}


// block IN
inline void _CPU_::BLOCK_IN2() {
	if (WRMEM(R.HL.w, dummy, &_CPU_::BLOCK_IN2)) {
		if (increase) R.HL.w++; else R.HL.w--; 
		R.AF.B.l = ZSTable[R.BC.B.h];
		if (dummy & S_FLAG) R.AF.B.l |= N_FLAG;
		if ((((R.BC.B.l - 1) & 0xFF) + dummy) & 0x100)
			R.AF.B.l |= H_FLAG | C_FLAG;
		if ((irep_tmp1[R.BC.B.l & 3][dummy & 3] ^
		    breg_tmp2[R.BC.B.h]                 ^
		    (R.BC.B.l >> 2)                     ^
		    (dummy >> 2)                          ) & 1)
			R.AF.B.l |= P_FLAG;
		if (repeat && R.BC.B.h) { BLOCK_DELAY(); R.PC.w -= 2; }
	}
}
inline void _CPU_::BLOCK_IN1() {
	if (READ_PORT(R.BC.w, dummy, &_CPU_::BLOCK_IN1)) {
		R.BC.B.h--; BLOCK_IN2();
	}
}
inline void _CPU_::BLOCK_IN() {
	SMALL_DELAY(); BLOCK_IN1();
}
void _CPU_::ind() {
	repeat = false; increase = false; BLOCK_IN();
}
void _CPU_::ini() {
	repeat = false; increase = true;  BLOCK_IN();
}
void _CPU_::indr() {
	repeat = true;  increase = false; BLOCK_IN();
}
void _CPU_::inir() {
	repeat = true;  increase = true;  BLOCK_IN();
}


// block OUT
inline void _CPU_::BLOCK_OUT2() {
	if (WRITE_PORT(R.BC.w, dummy, &_CPU_::BLOCK_OUT2)) {
		R.AF.B.l = ZSXYTable[R.BC.B.h];
		if (dummy & S_FLAG) R.AF.B.l |= N_FLAG;
		if ((((R.BC.B.l - 1) & 0xFF) + dummy) & 0x100)
			R.AF.B.l |= H_FLAG | C_FLAG;
		if ((irep_tmp1[R.BC.B.l & 3][dummy & 3] ^
		    breg_tmp2[R.BC.B.h]                 ^
		    (R.BC.B.l >> 2)                     ^
		    (dummy >> 2)                          ) & 1)
			R.AF.B.l |= P_FLAG;
		if (repeat && R.BC.B.h) { BLOCK_DELAY(); R.PC.w -= 2; }
	}
}
inline void _CPU_::BLOCK_OUT1() {
	if (RDMEM(R.HL.w, dummy, &_CPU_::BLOCK_OUT1)) {
		if (increase) R.HL.w++; else R.HL.w--; 
		R.BC.B.h--; BLOCK_OUT2();
	}
}
inline void _CPU_::BLOCK_OUT() {
	SMALL_DELAY(); BLOCK_OUT1();
}
void _CPU_::outd() {
	repeat = false; increase = false; BLOCK_OUT();
}
void _CPU_::outi() {
	repeat = false; increase = true;  BLOCK_OUT();
}
void _CPU_::otdr() {
	repeat = true;  increase = false; BLOCK_OUT();
}
void _CPU_::otir() {
	repeat = true;  increase = true;  BLOCK_OUT();
}


// various
void _CPU_::nop() { };
void _CPU_::ccf() {
	R.AF.B.l = ((R.AF.B.l & (S_FLAG | Z_FLAG | P_FLAG | C_FLAG) |
	            ((R.AF.B.l & C_FLAG) ? H_FLAG : 0)) |
	            (R.AF.B.h & (X_FLAG | Y_FLAG))                  ) ^ C_FLAG;
}
void _CPU_::cpl() {
	R.AF.B.h ^= 0xFF;
	R.AF.B.l = (R.AF.B.l & (S_FLAG | Z_FLAG | P_FLAG | C_FLAG)) |
	           H_FLAG | N_FLAG |
		   (R.AF.B.h & (X_FLAG | Y_FLAG));
	
}
void _CPU_::daa() {
	int i = R.AF.B.h;
	if (R.AF.B.l & C_FLAG) i |= 0x100;
	if (R.AF.B.l & H_FLAG) i |= 0x200;
	if (R.AF.B.l & N_FLAG) i |= 0x400;
	R.AF.w = DAATable[i];
}
void _CPU_::neg() {
	 byte i = R.AF.B.h;
	 R.AF.B.h = 0;
	 SUB(i);
}
void _CPU_::scf() { 
	R.AF.B.l = (R.AF.B.l & (S_FLAG | Z_FLAG | P_FLAG)) |
	           C_FLAG |
	           (R.AF.B.h & (X_FLAG | Y_FLAG));
}

void _CPU_::ex_af_af() {
	word i = R.AF.w;
	R.AF.w = R.AF2.w;
	R.AF2.w = i;
}
void _CPU_::ex_de_hl() {
	word i = R.DE.w;
	R.DE.w = R.HL.w;
	R.HL.w = i;
}
void _CPU_::exx() {
	word i;
	i = R.BC.w; R.BC.w = R.BC2.w; R.BC2.w = i;
	i = R.DE.w; R.DE.w = R.DE2.w; R.DE2.w = i;
	i = R.HL.w; R.HL.w = R.HL2.w; R.HL2.w = i;
}

void _CPU_::di() { R.IFF1 = R.nextIFF1 = R.IFF2 = false; }
void _CPU_::ei() {
	R.IFF1 = false;		// no ints after this instruction
	R.nextIFF1 = true;	// but allow them after next instruction
	R.IFF2 = true;
	slowInstructions = 2;
}
void _CPU_::halt() { R.HALT = true; slowInstructions = 2; }
void _CPU_::im_0() { R.IM = 0; }
void _CPU_::im_1() { R.IM = 1; }
void _CPU_::im_2() { R.IM = 2; }

// LD A,I/R
void _CPU_::ld_a_i() {
	SMALL_DELAY();
	R.AF.B.h = R.I;
	R.AF.B.l = (R.AF.B.l & C_FLAG) |
	           ZSXYTable[R.AF.B.h] |
		   (R.IFF2 ? V_FLAG : 0);
}
void _CPU_::ld_a_r() {
	SMALL_DELAY();
	R.AF.B.h = (R.R & 0x7f) | (R.R2 & 0x80);
	R.AF.B.l = (R.AF.B.l & C_FLAG) |
	           ZSXYTable[R.AF.B.h] |
		   (R.IFF2 ? V_FLAG : 0);
}

// LD I/R,A
void _CPU_::ld_i_a() {
	SMALL_DELAY();
	R.I = R.AF.B.h;
}
void _CPU_::ld_r_a() {
	SMALL_DELAY();
	R.R = R.R2 = R.AF.B.h;
}

// MULUB A,r	TODO timing
inline void _CPU_::MULUB(byte reg) {
	// TODO check flags
	R.HL.w = (word)R.AF.B.h * reg;
	R.AF.B.l = (R.AF.B.l & (N_FLAG | H_FLAG)) |
	           (R.HL.w ? 0 : Z_FLAG) |
		   ((R.HL.w & 0x8000) ? C_FLAG : 0);
}
void _CPU_::mulub_a_xhl() { } // TODO
void _CPU_::mulub_a_a()   { } // TODO
void _CPU_::mulub_a_b()   { MULUB(R.BC.B.h); }
void _CPU_::mulub_a_c()   { MULUB(R.BC.B.l); }
void _CPU_::mulub_a_d()   { MULUB(R.DE.B.h); }
void _CPU_::mulub_a_e()   { MULUB(R.DE.B.l); }
void _CPU_::mulub_a_h()   { } // TODO
void _CPU_::mulub_a_l()   { } // TODO

// MULUW HL,ss	TODO timing
inline void _CPU_::MULUW(word reg) {
	// TODO check flags
	unsigned long res = (unsigned long)R.HL.w * reg;
	R.DE.w = res >> 16;
	R.HL.w = res & 0xffff;
	R.AF.B.l = (R.AF.B.l & (N_FLAG | H_FLAG)) |
	           (res ? 0 : Z_FLAG) |
		   ((res & 0x80000000) ? C_FLAG : 0);
}
void _CPU_::muluw_hl_bc() { MULUW(R.BC.w); }
void _CPU_::muluw_hl_de() { } // TODO
void _CPU_::muluw_hl_hl() { } // TODO
void _CPU_::muluw_hl_sp() { MULUW(R.SP.w); }


// prefixes
void _CPU_::dd_cb1() {
	byte opcode;
	if (RDMEM(R.PC.w, opcode, &_CPU_::dd_cb1)) {
		R.PC.w++; DD_CB_DELAY();
		(this->*opcode_dd_cb[opcode])();
	}
}
void _CPU_::dd_cb() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::dd_cb)) {
		R.PC.w++; dd_cb1();
	}
}

void _CPU_::fd_cb1() {
	byte opcode;
	if (RDMEM(R.PC.w, opcode, &_CPU_::fd_cb1)) {
		R.PC.w++; DD_CB_DELAY();
		(this->*opcode_fd_cb[opcode])();
	}
}
void _CPU_::fd_cb() {
	if (RDMEM(R.PC.w, (byte)ofst, &_CPU_::fd_cb)) {
		R.PC.w++; fd_cb1();
	}
}

void _CPU_::cb() {
	byte opcode;
	if (RDMEM(R.PC.w, opcode, &_CPU_::cb)) {
		R.PC.w++; M1Cycle();
		(this->*opcode_cb[opcode])();
	}
}

void _CPU_::ed() {
	byte opcode;
	if (RDMEM(R.PC.w, opcode, &_CPU_::ed)) {
		R.PC.w++; M1Cycle();
		(this->*opcode_ed[opcode])();
	}
}

void _CPU_::dd() {
	byte opcode;
	if (RDMEM(R.PC.w, opcode, &_CPU_::dd)) {
		R.PC.w++; 
		if ((opcode != 0xCB) && (opcode != 0xDD) && (opcode != 0xFD))
			M1Cycle();
		else
			SMALL_DELAY();
		(this->*opcode_dd[opcode])();
	}
}
void _CPU_::dd2() {
	byte opcode;
	if (RDMEM(R.PC.w, opcode, &_CPU_::dd2)) {
		R.PC.w++; SMALL_DELAY();
		(this->*opcode_dd[opcode])();
	}
}

void _CPU_::fd() {
	byte opcode;
	if (RDMEM(R.PC.w, opcode, &_CPU_::fd)) {
		R.PC.w++; 
		if ((opcode != 0xCB) && (opcode != 0xDD) && (opcode != 0xFD))
			M1Cycle();
		else
			SMALL_DELAY();
		(this->*opcode_fd[opcode])();
	}
}
void _CPU_::fd2() {
	byte opcode;
	if (RDMEM(R.PC.w, opcode, &_CPU_::fd2)) {
		R.PC.w++; SMALL_DELAY();
		(this->*opcode_fd[opcode])();
	}
}


// Patch instruction.
//  This instruction doesn't exist on a real Z80.
void _CPU_::patch() {
	interface->patch(R);
}



#ifdef CPU_DEBUG
word _CPU_::start_pc;
EmuTimeFreq<CLOCK_FREQ> _CPU_::before;
#endif
