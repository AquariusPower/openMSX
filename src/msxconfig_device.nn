// $Id$

#ifndef __MSXCONFIG_HH__
#error use msxconfig.hh
#endif

#ifndef __MSXCONFIG_DEVICE_HH__
#define __MSXCONFIG_DEVICE_HH__

// nested class in MSXConfig
class Device
{
public:

	class Parameter
	{
	public:
		Parameter(const std::string &name, const std::string &value, const std::string &clasz);
		~Parameter() {}
	private:
		Parameter(); // block usage
		Parameter(const Parameter &); // block usage
		Parameter &operator=(const Parameter &); // block usage

		std::string lowerValue() const;
	public:
		const bool getAsBool() const;
		const int getAsInt() const ;
		const uint64 getAsUint64() const;
		// please let me know what types are needed exactly
		
		const std::string name;
		const std::string value;
		const std::string clasz;
	};
	class Slotted
	{
	public:
		Slotted(int PS, int SS=-1, int Page=-1);
		~Slotted() {}
	private:
		Slotted(); // block usage
		Slotted(const Slotted &); // block usage
		Slotted &operator=(const Slotted &); // block usage
		int ps;
		int ss;
		int page;
	public:
		bool hasSS();
		bool hasPage();
		int getPS();
		int getSS();
		int getPage();
	};

	Device(XMLNode *deviceNode);
	~Device();
	const std::string &getType();
	const std::string &getId();
	bool  isSlotted();
	int   getPage(); // of first slotted [backward compat]
	int   getPS(); // of first slotted [backward compat]
	int   getSS(); // of first slotted [backward compat]
	bool  hasParameter(const std::string &name);
	const std::string &getParameter(const std::string &name);
	const bool getParameterAsBool(const std::string &name);
	const int getParameterAsInt(const std::string &name);
	const uint64 getParameterAsUint64(const std::string &name);
	std::list<const Parameter*> getParametersWithClass(const std::string &clasz);
	void  dump();
	const std::string &getDesc();
	const std::string &getRem();
	std::list <Slotted*> slotted;
	
private:
	Device(); // block usage
	Device(const Device &foo); // block usage
	Device &operator=(const Device &foo); // block usage
	//XMLNode *deviceNode;
	std::string id, deviceType, desc, rem;
	std::list<Parameter*> parameters;
	const Parameter &getParameterByName(const std::string &name);
};

#endif
