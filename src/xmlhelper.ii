#ifndef __XMLHELPER_II__
#define __XMLHELPER_II__

#include <sstream>

#include <xml++.h>

template <class T> XMLHelper<T>::XMLHelper<T>(XMLNode *anode):node(anode),emptyString("")
{
}

template <class T> void XMLHelper<T>::checkName(const std::string &name)
{
	std::ostringstream buffer;
	if (node->name()!=name)
	{
		buffer << "Expected <" << name << "> node, ";
		buffer << "got <" << node->name() << ">";
		throw T(buffer);
	}
}

template <class T> void XMLHelper<T>::checkProperty(const std::string &name)
{
	std::ostringstream buffer;
	if (node->property(name)==0)
	{
		buffer << "Expected mandatory property " << name;
		buffer << " for node <" << node->name() << ">";
		throw T(buffer);
	}
}

template <class T> const string &XMLHelper<T>::getProperty(const std::string &name)
{
	if (node->property(name)==0)
	{
		return emptyString;
	}
	return node->property("id")->value();

}

template <class T> const string &XMLHelper<T>::getProperty(const std::string &name, const std::string &defaultValue)
{
	if (node->property(name)==0)
	{
		return defaultValue;
	}
	return node->property("id").value();
}

#endif
